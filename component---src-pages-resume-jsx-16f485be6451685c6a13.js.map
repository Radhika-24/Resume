{"version":3,"sources":["webpack://resume-builder/./node_modules/@material-ui/core/esm/Fab/Fab.js","webpack://resume-builder/./node_modules/@material-ui/icons/Close.js","webpack://resume-builder/./node_modules/use-detect-print/dist/index.js","webpack://resume-builder/./node_modules/uuid/dist/esm-browser/rng.js","webpack://resume-builder/./node_modules/uuid/dist/esm-browser/regex.js","webpack://resume-builder/./node_modules/uuid/dist/esm-browser/stringify.js","webpack://resume-builder/./node_modules/uuid/dist/esm-browser/validate.js","webpack://resume-builder/./node_modules/uuid/dist/esm-browser/v4.js","webpack://resume-builder/./src/components/A4Container.jsx","webpack://resume-builder/./src/components/TemplateSelector.jsx","webpack://resume-builder/./src/components/ResumeDrawerItems/resumeDrawerStyles.js","webpack://resume-builder/./src/components/ResumeDrawerItems/Items/List/ItemInput.jsx","webpack://resume-builder/./src/components/ResumeDrawerItems/Items/List/ItemsList.jsx","webpack://resume-builder/./src/store/actions/setResumeAwards.js","webpack://resume-builder/./src/components/ResumeDrawerItems/Items/Awards.jsx","webpack://resume-builder/./src/store/actions/setResumeBasics.js","webpack://resume-builder/./src/components/ResumeDrawerItems/Items/Basics.jsx","webpack://resume-builder/./src/store/actions/setResumeEducation.js","webpack://resume-builder/./src/components/ResumeDrawerItems/Items/Education.jsx","webpack://resume-builder/./src/store/actions/setResumeInterests.js","webpack://resume-builder/./src/components/ResumeDrawerItems/Items/Interests.jsx","webpack://resume-builder/./src/store/actions/setResumeLanguages.js","webpack://resume-builder/./src/components/ResumeDrawerItems/Items/Languages.jsx","webpack://resume-builder/./src/store/actions/setResumePublications.js","webpack://resume-builder/./src/components/ResumeDrawerItems/Items/Publications.jsx","webpack://resume-builder/./src/store/actions/setResumeProjects.js","webpack://resume-builder/./src/components/ResumeDrawerItems/Items/Projects.jsx","webpack://resume-builder/./src/store/actions/setResumeReferences.js","webpack://resume-builder/./src/components/ResumeDrawerItems/Items/References.jsx","webpack://resume-builder/./src/store/actions/setResumeSkills.js","webpack://resume-builder/./src/components/ResumeDrawerItems/Items/Skills.jsx","webpack://resume-builder/./src/store/actions/setResumeVolunteer.js","webpack://resume-builder/./src/components/ResumeDrawerItems/Items/Volunteer.jsx","webpack://resume-builder/./src/store/actions/setResumeWork.js","webpack://resume-builder/./src/components/ResumeDrawerItems/Items/Work.jsx","webpack://resume-builder/./src/components/ResumeDrawerItems/Items/List/VariableInput.jsx","webpack://resume-builder/./src/store/actions/setResumeCoverLetter.js","webpack://resume-builder/./src/components/ResumeDrawerItems/Items/CoverLetter.jsx","webpack://resume-builder/./src/store/actions/setResumeCertificates.js","webpack://resume-builder/./src/components/ResumeDrawerItems/Items/Certificates.jsx","webpack://resume-builder/./src/store/actions/setEnableSourceDataDownload.js","webpack://resume-builder/./src/components/ResumeDrawerItems/Items/Download.jsx","webpack://resume-builder/./src/components/ResumeDrawerItems/ResumeDrawerItems.jsx","webpack://resume-builder/./src/components/FloatingButton.jsx","webpack://resume-builder/./src/pages/Resume.jsx","webpack://resume-builder/./src/store/actions/setResumeTemplate.js","webpack://resume-builder/./src/store/selectors.js","webpack://resume-builder/./src/utils/json-parser.js","webpack://resume-builder/./src/components/ResumeTemplates|lazy|/^\\.\\/.*\\/Index$/|groupOptions: {}|namespace object"],"names":["Fab","props","ref","children","classes","className","_props$color","color","_props$component","component","_props$disabled","disabled","_props$disableFocusRi","disableFocusRipple","focusVisibleClassName","_props$size","size","_props$variant","variant","other","root","extended","concat","primary","secondary","colorInherit","focusRipple","focusVisible","label","theme","typography","button","boxSizing","minHeight","transition","transitions","create","duration","short","borderRadius","padding","minWidth","width","height","boxShadow","shadows","palette","getContrastText","grey","backgroundColor","A100","action","disabledBackground","textDecoration","display","alignItems","justifyContent","contrastText","main","dark","sizeSmall","sizeMedium","name","_interopRequireDefault","_interopRequireWildcard","exports","React","_default","default","createElement","d","react","_slicedToArray","e","r","Array","isArray","_arrayWithHoles","t","n","i","a","o","u","Symbol","iterator","next","done","push","value","length","return","_iterableToArrayLimit","TypeError","_nonIterableRest","useState","useEffect","window","matchMedia","matches","addListener","removeListener","getRandomValues","rnds8","Uint8Array","rng","crypto","bind","msCrypto","Error","uuid","byteToHex","toString","substr","arr","offset","arguments","undefined","toLowerCase","options","buf","rnds","random","useStyles","makeStyles","a4Container","background","paper","position","top","left","visibility","borderBottom","alignCenter","margin","alignLeft","marginLeft","customHeight","style","classNames","onSelect","stateTemplate","useIntl","useSelector","selectResumeTemplate","resumeTemplate","setResumeTemplate","handleChange","useCallback","target","onChange","displayEmpty","TEMPLATES_LIST","map","template","key","resumeDrawerItemsWrapper","marginTop","maxWidth","listStyle","paddingLeft","content","resumeDrawerItem","borderTop","checked","id","Fragment","type","htmlFor","capitalize","onClick","awards","Awards","dispatch","useDispatch","setResumeAwardsState","newAwards","setResumeAwards","toggleAwards","currentState","enabled","toggleAward","award","index","toggleAwardsDetail","propName","Object","entries","some","entry","varNameToString","title","date","awarder","summary","memo","basics","Basics","setResumeBasicsState","newBasics","setResumeBasics","toggleBasics","toggleBasicsDetail","toggleBasicsLocationDetail","location","toggleBasicsProfilesDetail","profile","profiles","basicsEnabled","image","email","phone","url","locationEnabled","address","postalCode","city","countryCode","region","network","education","Education","educations","setResumeEducationState","setResumeEducation","toggleEducations","toggleEducation","newEducation","toggleEducationDetail","toggleEducationCourses","educationIndex","course","courseIndex","courses","institution","area","studyType","startDate","endDate","score","idx","interests","Interest","setResumeInterestsState","interest","setResumeInterests","toggleInterests","toggleInterest","newInterest","toggleInterestDetail","toggleInterestKeywords","interestIndex","keyword","keywordIndex","keywords","languages","Languages","setResumeLanguagesState","newLanguages","setResumeLanguages","toggleLanguages","toggleLanguage","language","toggleLanguagesDetail","lang","fluency","publications","Publications","setResumePublicationsState","newPublications","setResumePublications","togglePublications","togglePublication","publication","togglePublicationsDetail","publisher","releaseDate","projects","Projects","setResumeProjectsState","newProjects","setResumeProjects","toggleProjects","toggleProject","project","toggleProjectDetail","toggleProjectKeywords","projectIndex","toggleProjectHighlights","highlight","highlightIndex","highlights","toggleProjectRoles","role","roleIndex","roles","description","entity","references","References","setResumeReferencesState","newReferences","setResumeReferences","toggleReferences","toggleReference","reference","toggleReferencesDetail","skills","Skills","setResumeSkillsState","newSkills","setResumeSkills","toggleSkills","toggleSkill","skill","toggleSkillsDetail","toggleSkillKeywords","skillIndex","level","volunteer","Volunteer","volunteerData","setResumeVolunteerState","setResumeVolunteer","toggleVolunteers","toggleVolunteer","newVolunteer","toggleVolunteerDetail","toggleVolunteerHighlights","volunteerIndex","volunteerEnabled","volunteers","organization","work","Work","workData","workEnabled","works","setResumeWorkState","newWork","setResumeWork","toggleWorks","toggleWork","oldWork","toggleWorkDetail","toggleWorkHighlights","oldWorkIndex","toggleWorkKeywords","inputWrapper","inputLabel","marginRight","textInput","placeholder","coverLetter","CoverLetter","toggleCoverLetter","setResumeCoverLetter","handleOnInputChanged","event","variables","certificates","Certificates","setResumeCertificatesState","newCertificates","setResumeCertificates","toggleCertificates","toggleCertificate","certificate","toggleCertificatesDetail","issuer","enableSourceDataDownload","Download","setEnableSourceDataDownload","actionButtons","templateSelectorWrapper","templateSelector","templateSelectorTitle","toggleableJsonResume","onClose","onPrint","intl","printDocument","print","handleDownloadJson","jsonResume","baseResume","convertToRegularObject","text","__translation__","downloadJson","handleTemplateSelected","selectedTemplate","Close","Button","formatMessage","Typography","TemplateSelector","isObjectNotEmpty","Interests","floatingButton","right","aria-label","Menu","resumeWrapper","drawerWrapper","zIndex","importTemplate","lazy","catch","a4ContainerHeight","setA4ContainerHeight","isDrawerOpen","setIsDrawerOpen","refContainer","useRef","rerenderRef","selectToggleableJsonResume","resumeTemplateName","hasData","isPrinting","useDetectPrint","navigate","Template","customTranslations","coverLetterVariables","loadTemplate","resumeHeight","current","clientHeight","ratio","vhs","Math","ceil","parseFloat","toFixed","setTimeout","Layout","SEO","robots","Drawer","anchor","open","A4Container","Suspense","fallback","state","readJsonFile","file","callback","reader","FileReader","onload","result","onerror","readAsText","jsonString","JSON","stringify","timestamp","Date","getTime","document","Blob","href","URL","createObjectURL","download","click","webpackAsyncContext","req","__webpack_require__","Promise","resolve","then","code","ids","all","slice","keys","module"],"mappings":"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","file":"component---src-pages-resume-jsx-16f485be6451685c6a13.js","sourcesContent":["import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ButtonBase from '../ButtonBase';\nimport capitalize from '../utils/capitalize';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: _extends({}, theme.typography.button, {\n      boxSizing: 'border-box',\n      minHeight: 36,\n      transition: theme.transitions.create(['background-color', 'box-shadow', 'border'], {\n        duration: theme.transitions.duration.short\n      }),\n      borderRadius: '50%',\n      padding: 0,\n      minWidth: 0,\n      width: 56,\n      height: 56,\n      boxShadow: theme.shadows[6],\n      '&:active': {\n        boxShadow: theme.shadows[12]\n      },\n      color: theme.palette.getContrastText(theme.palette.grey[300]),\n      backgroundColor: theme.palette.grey[300],\n      '&:hover': {\n        backgroundColor: theme.palette.grey.A100,\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: theme.palette.grey[300]\n        },\n        '&$disabled': {\n          backgroundColor: theme.palette.action.disabledBackground\n        },\n        textDecoration: 'none'\n      },\n      '&$focusVisible': {\n        boxShadow: theme.shadows[6]\n      },\n      '&$disabled': {\n        color: theme.palette.action.disabled,\n        boxShadow: theme.shadows[0],\n        backgroundColor: theme.palette.action.disabledBackground\n      }\n    }),\n\n    /* Styles applied to the span element that wraps the children. */\n    label: {\n      width: '100%',\n      // assure the correct width for iOS Safari\n      display: 'inherit',\n      alignItems: 'inherit',\n      justifyContent: 'inherit'\n    },\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    primary: {\n      color: theme.palette.primary.contrastText,\n      backgroundColor: theme.palette.primary.main,\n      '&:hover': {\n        backgroundColor: theme.palette.primary.dark,\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: theme.palette.primary.main\n        }\n      }\n    },\n\n    /* Styles applied to the root element if `color=\"secondary\"`. */\n    secondary: {\n      color: theme.palette.secondary.contrastText,\n      backgroundColor: theme.palette.secondary.main,\n      '&:hover': {\n        backgroundColor: theme.palette.secondary.dark,\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: theme.palette.secondary.main\n        }\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"extended\"`. */\n    extended: {\n      borderRadius: 48 / 2,\n      padding: '0 16px',\n      width: 'auto',\n      minHeight: 'auto',\n      minWidth: 48,\n      height: 48,\n      '&$sizeSmall': {\n        width: 'auto',\n        padding: '0 8px',\n        borderRadius: 34 / 2,\n        minWidth: 34,\n        height: 34\n      },\n      '&$sizeMedium': {\n        width: 'auto',\n        padding: '0 16px',\n        borderRadius: 40 / 2,\n        minWidth: 40,\n        height: 40\n      }\n    },\n\n    /* Pseudo-class applied to the ButtonBase root element if the button is keyboard focused. */\n    focusVisible: {},\n\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Styles applied to the root element if `color=\"inherit\"`. */\n    colorInherit: {\n      color: 'inherit'\n    },\n\n    /* Styles applied to the root element if `size=\"small\"``. */\n    sizeSmall: {\n      width: 40,\n      height: 40\n    },\n\n    /* Styles applied to the root element if `size=\"medium\"``. */\n    sizeMedium: {\n      width: 48,\n      height: 48\n    }\n  };\n};\nvar Fab = /*#__PURE__*/React.forwardRef(function Fab(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'default' : _props$color,\n      _props$component = props.component,\n      component = _props$component === void 0 ? 'button' : _props$component,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$disableFocusRi = props.disableFocusRipple,\n      disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi,\n      focusVisibleClassName = props.focusVisibleClassName,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'large' : _props$size,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'round' : _props$variant,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"color\", \"component\", \"disabled\", \"disableFocusRipple\", \"focusVisibleClassName\", \"size\", \"variant\"]);\n\n  return /*#__PURE__*/React.createElement(ButtonBase, _extends({\n    className: clsx(classes.root, className, variant !== \"round\" && classes.extended, size !== 'large' && classes[\"size\".concat(capitalize(size))], disabled && classes.disabled, {\n      'primary': classes.primary,\n      'secondary': classes.secondary,\n      'inherit': classes.colorInherit\n    }[color]),\n    component: component,\n    disabled: disabled,\n    focusRipple: !disableFocusRipple,\n    focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),\n    ref: ref\n  }, other), /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.label\n  }, children));\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default withStyles(styles, {\n  name: 'MuiFab'\n})(Fab);","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Close');\n\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: !0\n});\n\nvar react = require(\"react\");\n\nfunction _slicedToArray(e, r) {\n  return _arrayWithHoles(e) || _iterableToArrayLimit(e, r) || _nonIterableRest();\n}\n\nfunction _arrayWithHoles(e) {\n  if (Array.isArray(e)) return e;\n}\n\nfunction _iterableToArrayLimit(e, r) {\n  var t = [],\n      n = !0,\n      i = !1,\n      a = void 0;\n\n  try {\n    for (var o, u = e[Symbol.iterator](); !(n = (o = u.next()).done) && (t.push(o.value), !r || t.length !== r); n = !0) {\n      ;\n    }\n  } catch (e) {\n    i = !0, a = e;\n  } finally {\n    try {\n      n || null == u.return || u.return();\n    } finally {\n      if (i) throw a;\n    }\n  }\n\n  return t;\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction useDetectPrint() {\n  var e = _slicedToArray(react.useState(!1), 2),\n      r = e[0],\n      t = e[1];\n\n  return react.useEffect(function () {\n    var e = \"undefined\" != typeof window && window.matchMedia && window.matchMedia(\"print\"),\n        r = function r(e) {\n      return t(!!e.matches);\n    };\n\n    return e.addListener(r), function () {\n      return e.removeListener(r);\n    };\n  }, []), r;\n}\n\nexports.default = useDetectPrint;","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0; // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    a4Container: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        width: '21cm',\r\n        minHeight: '29.7cm',\r\n        '@media print': {\r\n            // backgroundColor: theme.palette.background.paper,\r\n            '-webkit-print-color-adjust': 'exact',\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            visibility: 'visible !important',\r\n            '& *': {\r\n                visibility: 'visible !important',\r\n                '& div': {\r\n                    '&:last-child': {\r\n                        borderBottom: 'none',\r\n                    },\r\n                },\r\n            },\r\n        },\r\n    },\r\n    alignCenter: {\r\n        margin: '0 auto',\r\n    },\r\n    alignLeft: {\r\n        marginLeft: 'calc(50% - (11.5cm + 120px))',\r\n        '@media print': {\r\n            margin: '0 auto',\r\n        },\r\n    },\r\n}));\r\n\r\nfunction A4Container({\r\n    children,\r\n    customHeight,\r\n    alignCenter = true,\r\n}) {\r\n    const classes = useStyles();\r\n    let style = {};\r\n\r\n    if (customHeight) {\r\n        style = {\r\n            height: `${customHeight}vh`,\r\n        };\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={classNames(\r\n                classes.a4Container,\r\n                {\r\n                    [classes.alignCenter]: alignCenter,\r\n                    [classes.alignLeft]: !alignCenter,\r\n                }\r\n            )}\r\n            style={style}\r\n        >\r\n            {children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default A4Container;\r\n","/* globals TEMPLATES_LIST */\r\nimport React, { useCallback, useState } from 'react';\r\nimport { MenuItem, Select } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { useIntl } from 'gatsby-plugin-intl';\r\n\r\n// Hooks\r\nimport { useSelector } from '../store/StoreProvider';\r\n\r\n// Actions\r\nimport { selectResumeTemplate } from '../store/selectors';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    // TODO\r\n}));\r\n\r\nconst TemplateSelector = ({ onSelect, className }) => {\r\n    const intl = useIntl();\r\n    const stateTemplate = useSelector(selectResumeTemplate);\r\n    const [resumeTemplate, setResumeTemplate] = useState(stateTemplate);\r\n    const classes = useStyles();\r\n\r\n    const handleChange = useCallback((e) => {\r\n        setResumeTemplate(e.target.value);\r\n        onSelect(e.target.value);\r\n    }, [onSelect]);\r\n\r\n    return (\r\n        <Select\r\n            className={className}\r\n            value={resumeTemplate}\r\n            onChange={handleChange}\r\n            displayEmpty\r\n        >\r\n            {TEMPLATES_LIST.map((template) => (\r\n                <MenuItem\r\n                    key={uuid()}\r\n                    value={template}\r\n                >\r\n                    {template}\r\n                </MenuItem>\r\n            ))}\r\n        </Select>\r\n    );\r\n};\r\n\r\nTemplateSelector.propTypes = {\r\n    // TODO\r\n};\r\n\r\nexport default TemplateSelector;\r\n","export default {\r\n    resumeDrawerItemsWrapper: {\r\n        marginTop: '76px',\r\n        minWidth: '300px',\r\n        maxWidth: '350px',\r\n        padding: '5px 20px',\r\n        '& ul': {\r\n            margin: '0',\r\n            listStyle: 'none',\r\n            paddingLeft: '25px',\r\n        },\r\n        '& li': {\r\n            '&::before': {\r\n                content: \"'\\\\2192'\",\r\n                position: 'absolute',\r\n                marginLeft: '-20px',\r\n            },\r\n        },\r\n    },\r\n    resumeDrawerItem: {\r\n        padding: '10px 0',\r\n        borderTop: '1px solid #ddd',\r\n        '&:first-child': { borderTop: 'none' },\r\n    },\r\n};\r\n","import React, { Fragment } from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\n// Utils\r\nimport { capitalize } from '../../../../utils/utils';\r\n\r\nconst ItemInput = ({\r\n    onChange,\r\n    label = '',\r\n    checked,\r\n}) => {\r\n    const id = uuid();\r\n    return (\r\n        <Fragment>\r\n            <input\r\n                type=\"checkbox\"\r\n                onChange={onChange}\r\n                id={id}\r\n                checked={checked}\r\n            />\r\n            <label htmlFor={id}>\r\n                {capitalize(label)}\r\n            </label>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default ItemInput;\r\n","import React from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\n// Components\r\nimport ItemInput from './ItemInput';\r\n\r\nconst ItemsList = ({\r\n    onClick,\r\n    label,\r\n    checked,\r\n}) => (\r\n    <li key={uuid()}>\r\n        <ItemInput\r\n            onChange={onClick}\r\n            label={label}\r\n            checked={checked}\r\n        />\r\n    </li>\r\n);\r\n\r\nexport default ItemsList;\r\n","const setResumeAwards = (awards) => ({\r\n    type: 'SET_RESUME_AWARDS',\r\n    awards,\r\n});\r\n\r\nexport default setResumeAwards;\r\n","import React, { Fragment, useCallback, memo } from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { makeStyles } from '@material-ui/styles';\r\n\r\n// Components\r\nimport ItemInput from './List/ItemInput';\r\nimport ItemsList from './List/ItemsList';\r\n\r\n// Styles\r\nimport style from '../resumeDrawerStyles';\r\n\r\n// Actions\r\nimport setResumeAwards from '../../../store/actions/setResumeAwards';\r\n\r\n// Utils\r\nimport { varNameToString } from '../../../utils/utils';\r\n\r\n// Hooks\r\nimport { useDispatch } from '../../../store/StoreProvider';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    ...style,\r\n}));\r\n\r\nfunction Awards({ awards }) {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n    const setResumeAwardsState = useCallback((newAwards) => {\r\n        dispatch(setResumeAwards(newAwards));\r\n    }, [dispatch]);\r\n\r\n    const toggleAwards = useCallback(() => {\r\n        const currentState = awards?.enabled;\r\n        setResumeAwardsState({\r\n            ...awards,\r\n            enabled: !currentState,\r\n        });\r\n    }, [awards, setResumeAwardsState]);\r\n\r\n    const toggleAward = useCallback((award, index) => () => {\r\n        const newAwards = { ...awards };\r\n        newAwards.value[index] = {\r\n            ...newAwards.value[index],\r\n            enabled: !newAwards.value[index].enabled,\r\n        };\r\n        setResumeAwardsState(newAwards);\r\n    }, [awards, setResumeAwardsState]);\r\n\r\n    const toggleAwardsDetail = useCallback((award, index, propName) => () => {\r\n        const newAwards = { ...awards };\r\n        newAwards.value[index] = {\r\n            ...newAwards.value[index],\r\n            value: {\r\n                ...newAwards.value[index].value,\r\n                [propName]: {\r\n                    ...newAwards.value[index].value[propName],\r\n                    enabled: !newAwards.value[index].value[propName].enabled,\r\n                },\r\n            },\r\n        };\r\n\r\n        if (newAwards.value[index].enabled) {\r\n            newAwards.value[index].enabled =\r\n                Object.entries(newAwards.value[index].value).some((entry) => entry[1].enabled);\r\n        }\r\n        setResumeAwardsState(newAwards);\r\n    }, [awards, setResumeAwardsState]);\r\n\r\n    return (\r\n        <div className={classes.resumeDrawerItem}>\r\n            <ItemInput\r\n                label={varNameToString({ awards })}\r\n                onChange={toggleAwards}\r\n                checked={awards?.enabled}\r\n            />\r\n            {awards?.enabled && (\r\n                <ul>\r\n                    {awards?.value.map((award, index) => {\r\n                        const {\r\n                            title,\r\n                            date,\r\n                            awarder,\r\n                            summary,\r\n                        } = award?.value || {};\r\n\r\n                        return (\r\n                            <Fragment key={uuid()}>\r\n                                <ItemsList\r\n                                    label={title?.value}\r\n                                    checked={award?.enabled}\r\n                                    onClick={toggleAward(award, index)}\r\n                                />\r\n                                {award?.enabled && (\r\n                                    <ul>\r\n                                        {title && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ title })}\r\n                                                checked={title?.enabled}\r\n                                                onClick={toggleAwardsDetail(\r\n                                                    award,\r\n                                                    index,\r\n                                                    varNameToString({ title })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {date && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ date })}\r\n                                                checked={date?.enabled}\r\n                                                onClick={toggleAwardsDetail(\r\n                                                    award,\r\n                                                    index,\r\n                                                    varNameToString({ date })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {awarder && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ awarder })}\r\n                                                checked={awarder?.enabled}\r\n                                                onClick={toggleAwardsDetail(\r\n                                                    award,\r\n                                                    index,\r\n                                                    varNameToString({ awarder })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {summary && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ summary })}\r\n                                                checked={summary?.enabled}\r\n                                                onClick={toggleAwardsDetail(\r\n                                                    award,\r\n                                                    index,\r\n                                                    varNameToString({ summary })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                    </ul>\r\n                                )}\r\n                            </Fragment>\r\n                        );\r\n                    })}\r\n                </ul>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default memo(Awards);\r\n","const setResumeBasics = (basics) => ({\r\n    type: 'SET_RESUME_BASICS',\r\n    basics,\r\n});\r\n\r\nexport default setResumeBasics;\r\n","import React, { Fragment, useCallback, memo } from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { makeStyles } from '@material-ui/styles';\r\n\r\n// Styles\r\nimport style from '../resumeDrawerStyles';\r\n\r\n// Components\r\nimport ItemInput from './List/ItemInput';\r\nimport ItemsList from './List/ItemsList';\r\n\r\n// Actions\r\nimport setResumeBasics from '../../../store/actions/setResumeBasics';\r\n\r\n// Hooks\r\nimport { useDispatch } from '../../../store/StoreProvider';\r\n\r\n// Utils\r\nimport { varNameToString } from '../../../utils/utils';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    ...style,\r\n}));\r\n\r\nfunction Basics({ basics }) {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n    const setResumeBasicsState = useCallback((newBasics) => {\r\n        dispatch(setResumeBasics(newBasics));\r\n    }, [dispatch]);\r\n\r\n    const toggleBasics = useCallback(() => {\r\n        const currentState = basics?.enabled;\r\n        setResumeBasicsState({\r\n            ...basics,\r\n            enabled: !currentState,\r\n        });\r\n    }, [basics, setResumeBasicsState]);\r\n\r\n    const toggleBasicsDetail = useCallback((propName) => () => {\r\n        const currentState = basics?.value[propName]?.enabled;\r\n        setResumeBasicsState({\r\n            ...basics,\r\n            value: {\r\n                ...basics?.value,\r\n                [propName]: {\r\n                    ...basics?.value[propName],\r\n                    enabled: !currentState,\r\n                },\r\n            },\r\n        });\r\n    }, [basics, setResumeBasicsState]);\r\n\r\n    const toggleBasicsLocationDetail = useCallback((propName) => () => {\r\n        const currentState = basics?.value.location?.value[propName]?.enabled;\r\n        setResumeBasicsState({\r\n            ...basics,\r\n            value: {\r\n                ...basics?.value,\r\n                location: {\r\n                    ...basics?.value.location,\r\n                    value: {\r\n                        ...basics?.value.location?.value,\r\n                        [propName]: {\r\n                            ...basics?.value.location?.value[propName],\r\n                            enabled: !currentState,\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        });\r\n    }, [basics, setResumeBasicsState]);\r\n\r\n    const toggleBasicsProfilesDetail = useCallback((profile, index) => () => {\r\n        const newBasics = { ...basics };\r\n        newBasics.value.profiles.value[index] = {\r\n            ...newBasics.value.profiles.value[index],\r\n            enabled: !newBasics.value.profiles.value[index].enabled,\r\n        };\r\n        setResumeBasicsState(newBasics);\r\n    }, [basics, setResumeBasicsState]);\r\n\r\n    const {\r\n        enabled: basicsEnabled,\r\n        value: {\r\n            name,\r\n            label,\r\n            image,\r\n            email,\r\n            phone,\r\n            url,\r\n            summary,\r\n            location: {\r\n                enabled: locationEnabled,\r\n                value: {\r\n                    address,\r\n                    postalCode,\r\n                    city,\r\n                    countryCode,\r\n                    region,\r\n                },\r\n            },\r\n            profiles,\r\n        },\r\n    } = basics || {};\r\n\r\n    return (\r\n        <div className={classes.resumeDrawerItem}>\r\n            <ItemInput\r\n                label={varNameToString({ basics })}\r\n                onChange={toggleBasics}\r\n                checked={basicsEnabled}\r\n            />\r\n            {basicsEnabled && (\r\n                <ul>\r\n                    {image && (\r\n                        <ItemsList\r\n                            label={varNameToString({ image })}\r\n                            checked={image?.enabled}\r\n                            onClick={toggleBasicsDetail(\r\n                                varNameToString({ image })\r\n                            )}\r\n                        />\r\n                    )}\r\n                    {name && (\r\n                        <ItemsList\r\n                            label={varNameToString({ name })}\r\n                            checked={name?.enabled}\r\n                            onClick={toggleBasicsDetail(\r\n                                varNameToString({ name })\r\n                            )}\r\n                        />\r\n                    )}\r\n                    {label && (\r\n                        <ItemsList\r\n                            label={varNameToString({ label })}\r\n                            checked={label?.enabled}\r\n                            onClick={toggleBasicsDetail(\r\n                                varNameToString({ label })\r\n                            )}\r\n                        />\r\n                    )}\r\n                    <ItemsList\r\n                        // TODO varNameToString({ location })\r\n                        label=\"location\"\r\n                        checked={locationEnabled}\r\n                        onClick={toggleBasicsDetail(\r\n                            'location'\r\n                        )}\r\n                    />\r\n                    {locationEnabled && (\r\n                        <ul>\r\n                            {address && (\r\n                                <ItemsList\r\n                                    label={varNameToString({ address })}\r\n                                    checked={address?.enabled}\r\n                                    onClick={toggleBasicsLocationDetail(\r\n                                        varNameToString({ address })\r\n                                    )}\r\n                                />\r\n                            )}\r\n                            {city && (\r\n                                <ItemsList\r\n                                    label={varNameToString({ city })}\r\n                                    checked={city?.enabled}\r\n                                    onClick={toggleBasicsLocationDetail(\r\n                                        varNameToString({ city })\r\n                                    )}\r\n                                />\r\n                            )}\r\n                            {region && (\r\n                                <ItemsList\r\n                                    label={varNameToString({ region })}\r\n                                    checked={region?.enabled}\r\n                                    onClick={toggleBasicsLocationDetail(\r\n                                        varNameToString({ region })\r\n                                    )}\r\n                                />\r\n                            )}\r\n                            {postalCode && (\r\n                                <ItemsList\r\n                                    label={varNameToString({ postalCode })}\r\n                                    checked={postalCode?.enabled}\r\n                                    onClick={toggleBasicsLocationDetail(\r\n                                        varNameToString({ postalCode })\r\n                                    )}\r\n                                />\r\n                            )}\r\n                            {countryCode && (\r\n                                <ItemsList\r\n                                    label={varNameToString({ countryCode })}\r\n                                    checked={countryCode?.enabled}\r\n                                    onClick={toggleBasicsLocationDetail(\r\n                                        varNameToString({ countryCode })\r\n                                    )}\r\n                                />\r\n                            )}\r\n                        </ul>\r\n                    )}\r\n                    {url && (\r\n                        <ItemsList\r\n                            label={varNameToString({ url })}\r\n                            checked={url?.enabled}\r\n                            onClick={toggleBasicsDetail(\r\n                                varNameToString({ url })\r\n                            )}\r\n                        />\r\n                    )}\r\n                    {phone && (\r\n                        <ItemsList\r\n                            label={varNameToString({ phone })}\r\n                            checked={phone?.enabled}\r\n                            onClick={toggleBasicsDetail(\r\n                                varNameToString({ phone })\r\n                            )}\r\n                        />\r\n                    )}\r\n                    {email && (\r\n                        <ItemsList\r\n                            label={varNameToString({ email })}\r\n                            checked={email?.enabled}\r\n                            onClick={toggleBasicsDetail(\r\n                                varNameToString({ email })\r\n                            )}\r\n                        />\r\n                    )}\r\n                    {profiles && (\r\n                        <Fragment>\r\n                            {profiles && (\r\n                                <ItemsList\r\n                                    label={varNameToString({ profiles })}\r\n                                    checked={profiles?.enabled}\r\n                                    onClick={toggleBasicsDetail(\r\n                                        varNameToString({ profiles })\r\n                                    )}\r\n                                />\r\n                            )}\r\n                            {profiles?.enabled && (\r\n                                <ul>\r\n                                    {profiles?.value.map((profile, index) => {\r\n                                        const { network } = profile?.value || {};\r\n                                        return (\r\n                                            <ItemsList\r\n                                                label={network?.value}\r\n                                                key={uuid()}\r\n                                                checked={profile?.enabled}\r\n                                                onClick={toggleBasicsProfilesDetail(\r\n                                                    profile,\r\n                                                    index\r\n                                                )}\r\n                                            />\r\n                                        );\r\n                                    })}\r\n                                </ul>\r\n                            )}\r\n                        </Fragment>\r\n                    )}\r\n                    {summary && (\r\n                        <ItemsList\r\n                            label={varNameToString({ summary })}\r\n                            checked={summary?.enabled}\r\n                            onClick={toggleBasicsDetail(\r\n                                varNameToString({ summary })\r\n                            )}\r\n                        />\r\n                    )}\r\n                </ul>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default memo(Basics);\r\n","const setResumeEducation = (education) => ({\r\n    type: 'SET_RESUME_EDUCATION',\r\n    education,\r\n});\r\n\r\nexport default setResumeEducation;\r\n","import React, { Fragment, useCallback, memo } from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { makeStyles } from '@material-ui/styles';\r\n\r\n// Components\r\nimport ItemInput from './List/ItemInput';\r\nimport ItemsList from './List/ItemsList';\r\n\r\n// Styles\r\nimport style from '../resumeDrawerStyles';\r\n\r\n// Actions\r\nimport setResumeEducation from '../../../store/actions/setResumeEducation';\r\n\r\n// Utils\r\nimport { varNameToString } from '../../../utils/utils';\r\n\r\n// Hooks\r\nimport { useDispatch } from '../../../store/StoreProvider';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    ...style,\r\n}));\r\n\r\nfunction Education({ education: educations }) {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n    const setResumeEducationState = useCallback((education) => {\r\n        dispatch(setResumeEducation(education));\r\n    }, [dispatch]);\r\n\r\n    const toggleEducations = useCallback(() => {\r\n        const currentState = educations?.enabled;\r\n        setResumeEducationState({\r\n            ...educations,\r\n            enabled: !currentState,\r\n        });\r\n    }, [educations, setResumeEducationState]);\r\n\r\n    const toggleEducation = useCallback((education, index) => () => {\r\n        const newEducation = { ...educations };\r\n        newEducation.value[index] = {\r\n            ...newEducation.value[index],\r\n            enabled: !newEducation.value[index].enabled,\r\n        };\r\n        setResumeEducationState(newEducation);\r\n    }, [educations, setResumeEducationState]);\r\n\r\n    const toggleEducationDetail = useCallback((education, index, propName) => () => {\r\n        const newEducation = { ...educations };\r\n        newEducation.value[index] = {\r\n            ...newEducation.value[index],\r\n            value: {\r\n                ...newEducation.value[index].value,\r\n                [propName]: {\r\n                    ...newEducation.value[index].value[propName],\r\n                    enabled: !newEducation.value[index].value[propName].enabled,\r\n                },\r\n            },\r\n        };\r\n\r\n        if (newEducation.value[index].enabled) {\r\n            newEducation.value[index].enabled =\r\n                Object.entries(newEducation.value[index].value).some((entry) => entry[1].enabled);\r\n        }\r\n        setResumeEducationState(newEducation);\r\n    }, [educations, setResumeEducationState]);\r\n\r\n    const toggleEducationCourses = useCallback((education, educationIndex, course, courseIndex) => () => {\r\n        const newEducation = { ...educations };\r\n        newEducation.value[educationIndex].value.courses.value[courseIndex] = {\r\n            ...newEducation.value[educationIndex].value.courses.value[courseIndex],\r\n            enabled: !newEducation.value[educationIndex].value.courses.value[courseIndex].enabled,\r\n        };\r\n        setResumeEducationState(newEducation);\r\n    }, [educations, setResumeEducationState]);\r\n\r\n    return (\r\n        <div className={classes.resumeDrawerItem}>\r\n            <ItemInput\r\n                // TODO varNameToString({ education })\r\n                label=\"education\"\r\n                checked={educations?.enabled}\r\n                onChange={toggleEducations}\r\n            />\r\n            {educations?.enabled && (\r\n                <ul>\r\n                    {educations?.value.map((education, index) => {\r\n                        const {\r\n                            institution,\r\n                            url,\r\n                            area,\r\n                            studyType,\r\n                            startDate,\r\n                            endDate,\r\n                            score,\r\n                            courses,\r\n                        } = education?.value || {};\r\n\r\n                        return (\r\n                            <Fragment key={uuid()}>\r\n                                {educations?.value && (\r\n                                    <ItemsList\r\n                                        label={institution?.value}\r\n                                        checked={education?.enabled}\r\n                                        onClick={toggleEducation(\r\n                                            education,\r\n                                            index\r\n                                        )}\r\n                                    />\r\n                                )}\r\n                                {(education?.enabled && educations?.enabled) && (\r\n                                    <ul>\r\n                                        {institution?.value && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ institution })}\r\n                                                checked={institution?.enabled}\r\n                                                onClick={toggleEducationDetail(\r\n                                                    education,\r\n                                                    index,\r\n                                                    varNameToString({ institution })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {url && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ url })}\r\n                                                checked={url?.enabled}\r\n                                                onClick={toggleEducationDetail(\r\n                                                    education,\r\n                                                    index,\r\n                                                    varNameToString({ url })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {area && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ area })}\r\n                                                checked={area?.enabled}\r\n                                                onClick={toggleEducationDetail(\r\n                                                    education,\r\n                                                    index,\r\n                                                    varNameToString({ area })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {studyType && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ studyType })}\r\n                                                checked={studyType?.enabled}\r\n                                                onClick={toggleEducationDetail(\r\n                                                    education,\r\n                                                    index,\r\n                                                    varNameToString({ studyType })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {startDate && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ startDate })}\r\n                                                checked={startDate?.enabled}\r\n                                                onClick={toggleEducationDetail(\r\n                                                    education,\r\n                                                    index,\r\n                                                    varNameToString({ startDate })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {endDate && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ endDate })}\r\n                                                checked={endDate?.enabled}\r\n                                                onClick={toggleEducationDetail(\r\n                                                    education,\r\n                                                    index,\r\n                                                    varNameToString({ endDate })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {score && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ score })}\r\n                                                checked={score?.enabled}\r\n                                                onClick={toggleEducationDetail(\r\n                                                    education,\r\n                                                    index,\r\n                                                    varNameToString({ score })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {courses && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ courses })}\r\n                                                checked={courses?.enabled}\r\n                                                onClick={toggleEducationDetail(\r\n                                                    education,\r\n                                                    index,\r\n                                                    varNameToString({ courses })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {courses?.enabled && (\r\n                                            <ul>\r\n                                                {courses?.value.map((course, idx) => (\r\n                                                    <ItemsList\r\n                                                        label={course?.value}\r\n                                                        key={uuid()}\r\n                                                        checked={course?.enabled}\r\n                                                        onClick={toggleEducationCourses(\r\n                                                            education,\r\n                                                            index,\r\n                                                            course,\r\n                                                            idx\r\n                                                        )}\r\n                                                    />\r\n                                                ))}\r\n                                            </ul>\r\n                                        )}\r\n                                    </ul>\r\n                                )}\r\n                            </Fragment>\r\n                        );\r\n                    })}\r\n                </ul>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default memo(Education);\r\n","const setResumeInterests = (interests) => ({\r\n    type: 'SET_RESUME_INTERESTS',\r\n    interests,\r\n});\r\n\r\nexport default setResumeInterests;\r\n","import React, { Fragment, useCallback, memo } from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { makeStyles } from '@material-ui/styles';\r\n\r\n// Components\r\nimport ItemInput from './List/ItemInput';\r\nimport ItemsList from './List/ItemsList';\r\n\r\n// Styles\r\nimport style from '../resumeDrawerStyles';\r\n\r\n// Actions\r\nimport setResumeInterests from '../../../store/actions/setResumeInterests';\r\n\r\n// Hooks\r\nimport { useDispatch } from '../../../store/StoreProvider';\r\n\r\n// Utils\r\nimport { varNameToString } from '../../../utils/utils';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    ...style,\r\n}));\r\n\r\nfunction Interest({ interests }) {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n    const setResumeInterestsState = useCallback((interest) => {\r\n        dispatch(setResumeInterests(interest));\r\n    }, [dispatch]);\r\n\r\n    const toggleInterests = useCallback(() => {\r\n        const currentState = interests?.enabled;\r\n        setResumeInterestsState({\r\n            ...interests,\r\n            enabled: !currentState,\r\n        });\r\n    }, [interests, setResumeInterestsState]);\r\n\r\n    const toggleInterest = useCallback((interest, index) => () => {\r\n        const newInterest = { ...interests };\r\n        newInterest.value[index] = {\r\n            ...newInterest.value[index],\r\n            enabled: !newInterest.value[index].enabled,\r\n        };\r\n        setResumeInterestsState(newInterest);\r\n    }, [interests, setResumeInterestsState]);\r\n\r\n    const toggleInterestDetail = useCallback((interest, index, propName) => () => {\r\n        const newInterest = { ...interests };\r\n        newInterest.value[index] = {\r\n            ...newInterest.value[index],\r\n            value: {\r\n                ...newInterest.value[index].value,\r\n                [propName]: {\r\n                    ...newInterest.value[index].value[propName],\r\n                    enabled: !newInterest.value[index].value[propName].enabled,\r\n                },\r\n            },\r\n        };\r\n\r\n        if (newInterest.value[index].enabled) {\r\n            newInterest.value[index].enabled =\r\n                Object.entries(newInterest.value[index].value).some((entry) => entry[1].enabled);\r\n        }\r\n        setResumeInterestsState(newInterest);\r\n    }, [interests, setResumeInterestsState]);\r\n\r\n    const toggleInterestKeywords = useCallback((interest, interestIndex, keyword, keywordIndex) => () => {\r\n        const newInterest = { ...interests };\r\n        newInterest.value[interestIndex].value.keywords.value[keywordIndex] = {\r\n            ...newInterest.value[interestIndex].value.keywords.value[keywordIndex],\r\n            enabled: !newInterest.value[interestIndex].value.keywords.value[keywordIndex].enabled,\r\n        };\r\n        setResumeInterestsState(newInterest);\r\n    }, [interests, setResumeInterestsState]);\r\n\r\n    return (\r\n        <div className={classes.resumeDrawerItem}>\r\n            <ItemInput\r\n                // TODO varNameToString({ interest })\r\n                label=\"interest\"\r\n                onChange={toggleInterests}\r\n                checked={interests?.enabled}\r\n            />\r\n            {interests?.enabled && (\r\n                <ul>\r\n                    {interests?.value.map((interest, index) => {\r\n                        const {\r\n                            name,\r\n                            keywords,\r\n                        } = interest?.value || {};\r\n\r\n                        return (\r\n                            <Fragment key={uuid()}>\r\n                                {interest && (\r\n                                    <ItemsList\r\n                                        label={name?.value}\r\n                                        checked={interest?.enabled}\r\n                                        onClick={toggleInterest(interest, index)}\r\n                                    />\r\n                                )}\r\n                                {interest?.enabled && (\r\n                                    <ul>\r\n                                        {name && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ name })}\r\n                                                checked={name?.enabled}\r\n                                                onClick={toggleInterestDetail(\r\n                                                    interest,\r\n                                                    index,\r\n                                                    varNameToString({ name })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {keywords && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ keywords })}\r\n                                                checked={keywords?.enabled}\r\n                                                onClick={toggleInterestDetail(\r\n                                                    interest,\r\n                                                    index,\r\n                                                    varNameToString({ keywords })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {keywords?.enabled && (\r\n                                            <ul>\r\n                                                {keywords?.value.map((keyword, idx) => (\r\n                                                    <ItemsList\r\n                                                        label={keyword?.value}\r\n                                                        key={uuid()}\r\n                                                        checked={keyword?.enabled}\r\n                                                        onClick={toggleInterestKeywords(\r\n                                                            interest,\r\n                                                            index,\r\n                                                            keyword,\r\n                                                            idx\r\n                                                        )}\r\n                                                    />\r\n                                                ))}\r\n                                            </ul>\r\n                                        )}\r\n                                    </ul>\r\n                                )}\r\n                            </Fragment>\r\n                        );\r\n                    })}\r\n                </ul>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default memo(Interest);\r\n","const setResumeLanguages = (languages) => ({\r\n    type: 'SET_RESUME_LANGUAGES',\r\n    languages,\r\n});\r\n\r\nexport default setResumeLanguages;\r\n","import React, { Fragment, useCallback, memo } from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { makeStyles } from '@material-ui/styles';\r\n\r\n// Components\r\nimport ItemInput from './List/ItemInput';\r\nimport ItemsList from './List/ItemsList';\r\n\r\n// Styles\r\nimport style from '../resumeDrawerStyles';\r\n\r\n// Actions\r\nimport setResumeLanguages from '../../../store/actions/setResumeLanguages';\r\n\r\n// Utils\r\nimport { varNameToString } from '../../../utils/utils';\r\n\r\n// Hooks\r\nimport { useDispatch } from '../../../store/StoreProvider';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    ...style,\r\n}));\r\n\r\nfunction Languages({ languages }) {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n    const setResumeLanguagesState = useCallback((newLanguages) => {\r\n        dispatch(setResumeLanguages(newLanguages));\r\n    }, [dispatch]);\r\n\r\n    const toggleLanguages = useCallback(() => {\r\n        const currentState = languages?.enabled;\r\n        setResumeLanguagesState({\r\n            ...languages,\r\n            enabled: !currentState,\r\n        });\r\n    }, [languages, setResumeLanguagesState]);\r\n\r\n    const toggleLanguage = useCallback((language, index) => () => {\r\n        const newLanguages = { ...languages };\r\n        newLanguages.value[index] = {\r\n            ...newLanguages.value[index],\r\n            enabled: !newLanguages.value[index].enabled,\r\n        };\r\n        setResumeLanguagesState(newLanguages);\r\n    }, [languages, setResumeLanguagesState]);\r\n\r\n    const toggleLanguagesDetail = useCallback((language, index, propName) => () => {\r\n        const newLanguages = { ...languages };\r\n        newLanguages.value[index] = {\r\n            ...newLanguages.value[index],\r\n            value: {\r\n                ...newLanguages.value[index].value,\r\n                [propName]: {\r\n                    ...newLanguages.value[index].value[propName],\r\n                    enabled: !newLanguages.value[index].value[propName].enabled,\r\n                },\r\n            },\r\n        };\r\n\r\n        if (newLanguages.value[index].enabled) {\r\n            newLanguages.value[index].enabled =\r\n                Object.entries(newLanguages.value[index].value).some((entry) => entry[1].enabled);\r\n        }\r\n        setResumeLanguagesState(newLanguages);\r\n    }, [languages, setResumeLanguagesState]);\r\n\r\n    return (\r\n        <div className={classes.resumeDrawerItem}>\r\n            <ItemInput\r\n                label={varNameToString({ languages })}\r\n                onChange={toggleLanguages}\r\n                checked={languages?.enabled}\r\n            />\r\n            {languages?.enabled && (\r\n                <ul>\r\n                    {languages?.value.map((lang, index) => {\r\n                        const {\r\n                            language,\r\n                            fluency,\r\n                        } = lang?.value || {};\r\n\r\n                        return (\r\n                            <Fragment key={uuid()}>\r\n                                {lang && (\r\n                                    <ItemsList\r\n                                        label={language?.value}\r\n                                        checked={lang?.enabled}\r\n                                        onClick={toggleLanguage(lang, index)}\r\n                                    />\r\n                                )}\r\n                                {lang?.enabled && (\r\n                                    <ul>\r\n                                        {language && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ language })}\r\n                                                checked={language?.enabled}\r\n                                                onClick={toggleLanguagesDetail(\r\n                                                    lang,\r\n                                                    index,\r\n                                                    varNameToString({ language })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {fluency && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ fluency })}\r\n                                                checked={fluency?.enabled}\r\n                                                onClick={toggleLanguagesDetail(\r\n                                                    lang,\r\n                                                    index,\r\n                                                    varNameToString({ fluency })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                    </ul>\r\n                                )}\r\n                            </Fragment>\r\n                        );\r\n                    })}\r\n                </ul>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default memo(Languages);\r\n","const setResumePublications = (publications) => ({\r\n    type: 'SET_RESUME_PUBLICATIONS',\r\n    publications,\r\n});\r\n\r\nexport default setResumePublications;\r\n","import React, { Fragment, useCallback, memo } from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { makeStyles } from '@material-ui/styles';\r\n\r\n// Components\r\nimport ItemInput from './List/ItemInput';\r\nimport ItemsList from './List/ItemsList';\r\n\r\n// Styles\r\nimport style from '../resumeDrawerStyles';\r\n\r\n// Actions\r\nimport setResumePublications from '../../../store/actions/setResumePublications';\r\n\r\n// Utils\r\nimport { varNameToString } from '../../../utils/utils';\r\n\r\n// Hooks\r\nimport { useDispatch } from '../../../store/StoreProvider';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    ...style,\r\n}));\r\n\r\nfunction Publications({ publications }) {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n    const setResumePublicationsState = useCallback((newPublications) => {\r\n        dispatch(setResumePublications(newPublications));\r\n    }, [dispatch]);\r\n\r\n    const togglePublications = useCallback(() => {\r\n        const currentState = publications?.enabled;\r\n        setResumePublicationsState({\r\n            ...publications,\r\n            enabled: !currentState,\r\n        });\r\n    }, [publications, setResumePublicationsState]);\r\n\r\n    const togglePublication = useCallback((publication, index) => () => {\r\n        const newPublications = { ...publications };\r\n        newPublications.value[index] = {\r\n            ...newPublications.value[index],\r\n            enabled: !newPublications.value[index].enabled,\r\n        };\r\n        setResumePublicationsState(newPublications);\r\n    }, [publications, setResumePublicationsState]);\r\n\r\n    const togglePublicationsDetail = useCallback((publication, index, propName) => () => {\r\n        const newPublications = { ...publications };\r\n        newPublications.value[index] = {\r\n            ...newPublications.value[index],\r\n            value: {\r\n                ...newPublications.value[index].value,\r\n                [propName]: {\r\n                    ...newPublications.value[index].value[propName],\r\n                    enabled: !newPublications.value[index].value[propName].enabled,\r\n                },\r\n            },\r\n        };\r\n\r\n        if (newPublications.value[index].enabled) {\r\n            newPublications.value[index].enabled =\r\n                Object.entries(newPublications.value[index].value).some((entry) => entry[1].enabled);\r\n        }\r\n        setResumePublicationsState(newPublications);\r\n    }, [publications, setResumePublicationsState]);\r\n\r\n    return (\r\n        <div className={classes.resumeDrawerItem}>\r\n            <ItemInput\r\n                label={varNameToString({ publications })}\r\n                onChange={togglePublications}\r\n                checked={publications?.enabled}\r\n            />\r\n            {publications?.enabled && (\r\n                <ul>\r\n                    {publications?.value.map((publication, index) => {\r\n                        const {\r\n                            name,\r\n                            publisher,\r\n                            releaseDate,\r\n                            url,\r\n                            summary,\r\n                        } = publication?.value || {};\r\n\r\n                        return (\r\n                            <Fragment key={uuid()}>\r\n                                <ItemsList\r\n                                    label={name?.value}\r\n                                    checked={publication?.enabled}\r\n                                    onClick={togglePublication(publication, index)}\r\n                                />\r\n                                {publication?.enabled && (\r\n                                    <ul>\r\n                                        {name && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ name })}\r\n                                                checked={name?.enabled}\r\n                                                onClick={togglePublicationsDetail(\r\n                                                    publication,\r\n                                                    index,\r\n                                                    varNameToString({ name })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {publisher && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ publisher })}\r\n                                                checked={publisher?.enabled}\r\n                                                onClick={togglePublicationsDetail(\r\n                                                    publication,\r\n                                                    index,\r\n                                                    varNameToString({ publisher })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {releaseDate && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ releaseDate })}\r\n                                                checked={releaseDate?.enabled}\r\n                                                onClick={togglePublicationsDetail(\r\n                                                    publication,\r\n                                                    index,\r\n                                                    varNameToString({ releaseDate })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {url && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ url })}\r\n                                                checked={url?.enabled}\r\n                                                onClick={togglePublicationsDetail(\r\n                                                    publication,\r\n                                                    index,\r\n                                                    varNameToString({ url })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {summary && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ summary })}\r\n                                                checked={summary?.enabled}\r\n                                                onClick={togglePublicationsDetail(\r\n                                                    publication,\r\n                                                    index,\r\n                                                    varNameToString({ summary })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                    </ul>\r\n                                )}\r\n                            </Fragment>\r\n                        );\r\n                    })}\r\n                </ul>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default memo(Publications);\r\n","const setResumeProjects = (projects) => ({\r\n    type: 'SET_RESUME_PROJECTS',\r\n    projects,\r\n});\r\n\r\nexport default setResumeProjects;\r\n","import React, { Fragment, useCallback, memo } from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { makeStyles } from '@material-ui/styles';\r\n\r\n// Components\r\nimport ItemInput from './List/ItemInput';\r\nimport ItemsList from './List/ItemsList';\r\n\r\n// Styles\r\nimport style from '../resumeDrawerStyles';\r\n\r\n// Actions\r\nimport setResumeProjects from '../../../store/actions/setResumeProjects';\r\n\r\n// Utils\r\nimport { varNameToString } from '../../../utils/utils';\r\n\r\n// Hooks\r\nimport { useDispatch } from '../../../store/StoreProvider';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    ...style,\r\n}));\r\n\r\nfunction Projects({ projects }) {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n    const setResumeProjectsState = useCallback((newProjects) => {\r\n        dispatch(setResumeProjects(newProjects));\r\n    }, [dispatch]);\r\n\r\n    const toggleProjects = useCallback(() => {\r\n        const currentState = projects?.enabled;\r\n        setResumeProjectsState({\r\n            ...projects,\r\n            enabled: !currentState,\r\n        });\r\n    }, [projects, setResumeProjectsState]);\r\n\r\n    const toggleProject = useCallback((project, index) => () => {\r\n        const newProjects = { ...projects };\r\n        newProjects.value[index] = {\r\n            ...newProjects.value[index],\r\n            enabled: !newProjects.value[index].enabled,\r\n        };\r\n        setResumeProjectsState(newProjects);\r\n    }, [projects, setResumeProjectsState]);\r\n\r\n    const toggleProjectDetail = useCallback((project, index, propName) => () => {\r\n        const newProjects = { ...projects };\r\n        newProjects.value[index] = {\r\n            ...newProjects.value[index],\r\n            value: {\r\n                ...newProjects.value[index].value,\r\n                [propName]: {\r\n                    ...newProjects.value[index].value[propName],\r\n                    enabled: !newProjects.value[index].value[propName].enabled,\r\n                },\r\n            },\r\n        };\r\n\r\n        if (newProjects.value[index].enabled) {\r\n            newProjects.value[index].enabled =\r\n                Object.entries(newProjects.value[index].value).some((entry) => entry[1].enabled);\r\n        }\r\n        setResumeProjectsState(newProjects);\r\n    }, [projects, setResumeProjectsState]);\r\n\r\n    const toggleProjectKeywords = useCallback((project, projectIndex, keyword, keywordIndex) => () => {\r\n        const newProjects = { ...projects };\r\n        newProjects.value[projectIndex].value.keywords.value[keywordIndex] = {\r\n            ...newProjects.value[projectIndex].value.keywords.value[keywordIndex],\r\n            enabled: !newProjects.value[projectIndex].value.keywords.value[keywordIndex].enabled,\r\n        };\r\n        setResumeProjectsState(newProjects);\r\n    }, [projects, setResumeProjectsState]);\r\n\r\n    const toggleProjectHighlights = useCallback((project, projectIndex, highlight, highlightIndex) => () => {\r\n        const newProjects = { ...projects };\r\n        newProjects.value[projectIndex].value.highlights.value[highlightIndex] = {\r\n            ...newProjects.value[projectIndex].value.highlights.value[highlightIndex],\r\n            enabled: !newProjects.value[projectIndex].value.highlights.value[highlightIndex].enabled,\r\n        };\r\n        setResumeProjectsState(newProjects);\r\n    }, [projects, setResumeProjectsState]);\r\n\r\n    const toggleProjectRoles = useCallback((project, projectIndex, role, roleIndex) => () => {\r\n        const newProjects = { ...projects };\r\n        newProjects.value[projectIndex].value.roles.value[roleIndex] = {\r\n            ...newProjects.value[projectIndex].value.roles.value[roleIndex],\r\n            enabled: !newProjects.value[projectIndex].value.roles.value[roleIndex].enabled,\r\n        };\r\n        setResumeProjectsState(newProjects);\r\n    }, [projects, setResumeProjectsState]);\r\n\r\n    return (\r\n        <div className={classes.resumeDrawerItem}>\r\n            <ItemInput\r\n                label={varNameToString({ projects })}\r\n                onChange={toggleProjects}\r\n                checked={projects?.enabled}\r\n            />\r\n            {projects?.enabled && (\r\n                <ul>\r\n                    {projects?.value.map((project, index) => {\r\n                        const {\r\n                            name,\r\n                            description,\r\n                            highlights,\r\n                            keywords,\r\n                            startDate,\r\n                            endDate,\r\n                            url,\r\n                            roles,\r\n                            entity,\r\n                            type,\r\n                        } = project?.value || {};\r\n\r\n                        return (\r\n                            <Fragment key={uuid()}>\r\n                                <ItemsList\r\n                                    label={name?.value}\r\n                                    checked={project?.enabled}\r\n                                    onClick={toggleProject(project, index)}\r\n                                />\r\n                                {project?.enabled && (\r\n                                    <ul>\r\n                                        {name && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ name })}\r\n                                                checked={name?.enabled}\r\n                                                onClick={toggleProjectDetail(\r\n                                                    project,\r\n                                                    index,\r\n                                                    varNameToString({ name })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {entity && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ entity })}\r\n                                                checked={entity?.enabled}\r\n                                                onClick={toggleProjectDetail(\r\n                                                    project,\r\n                                                    index,\r\n                                                    varNameToString({ entity })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {startDate && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ startDate })}\r\n                                                checked={startDate?.enabled}\r\n                                                onClick={toggleProjectDetail(\r\n                                                    project,\r\n                                                    index,\r\n                                                    varNameToString({ startDate })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {endDate && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ endDate })}\r\n                                                checked={endDate?.enabled}\r\n                                                onClick={toggleProjectDetail(\r\n                                                    project,\r\n                                                    index,\r\n                                                    varNameToString({ endDate })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {url && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ url })}\r\n                                                checked={url?.enabled}\r\n                                                onClick={toggleProjectDetail(\r\n                                                    project,\r\n                                                    index,\r\n                                                    varNameToString({ url })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {description && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ description })}\r\n                                                checked={description?.enabled}\r\n                                                onClick={toggleProjectDetail(\r\n                                                    project,\r\n                                                    index,\r\n                                                    varNameToString({ description })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {type && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ type })}\r\n                                                checked={type?.enabled}\r\n                                                onClick={toggleProjectDetail(\r\n                                                    project,\r\n                                                    index,\r\n                                                    varNameToString({ type })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {highlights && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ highlights })}\r\n                                                checked={highlights?.enabled}\r\n                                                onClick={toggleProjectDetail(\r\n                                                    project,\r\n                                                    index,\r\n                                                    varNameToString({ highlights })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {highlights?.enabled && (\r\n                                            <ul>\r\n                                                {highlights?.value.map((highlight, idx) => (\r\n                                                    <ItemsList\r\n                                                        label={highlight?.value}\r\n                                                        key={uuid()}\r\n                                                        checked={highlight?.enabled}\r\n                                                        onClick={toggleProjectHighlights(\r\n                                                            project,\r\n                                                            index,\r\n                                                            highlight,\r\n                                                            idx\r\n                                                        )}\r\n                                                    />\r\n                                                ))}\r\n                                            </ul>\r\n                                        )}\r\n                                        {keywords && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ keywords })}\r\n                                                checked={keywords?.enabled}\r\n                                                onClick={toggleProjectDetail(\r\n                                                    project,\r\n                                                    index,\r\n                                                    varNameToString({ keywords })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {keywords?.enabled && (\r\n                                            <ul>\r\n                                                {keywords?.value.map((keyword, idx) => (\r\n                                                    <ItemsList\r\n                                                        label={keyword?.value}\r\n                                                        key={uuid()}\r\n                                                        checked={keyword?.enabled}\r\n                                                        onClick={toggleProjectKeywords(\r\n                                                            project,\r\n                                                            index,\r\n                                                            keyword,\r\n                                                            idx\r\n                                                        )}\r\n                                                    />\r\n                                                ))}\r\n                                            </ul>\r\n                                        )}\r\n                                        {roles && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ roles })}\r\n                                                checked={roles?.enabled}\r\n                                                onClick={toggleProjectDetail(\r\n                                                    project,\r\n                                                    index,\r\n                                                    varNameToString({ roles })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {roles?.enabled && (\r\n                                            <ul>\r\n                                                {roles?.value.map((role, idx) => (\r\n                                                    <ItemsList\r\n                                                        label={role?.value}\r\n                                                        key={uuid()}\r\n                                                        checked={role?.enabled}\r\n                                                        onClick={toggleProjectRoles(\r\n                                                            project,\r\n                                                            index,\r\n                                                            role,\r\n                                                            idx\r\n                                                        )}\r\n                                                    />\r\n                                                ))}\r\n                                            </ul>\r\n                                        )}\r\n                                    </ul>\r\n                                )}\r\n                            </Fragment>\r\n                        );\r\n                    })}\r\n                </ul>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default memo(Projects);\r\n","const setResumeReferences = (references) => ({\r\n    type: 'SET_RESUME_REFERENCES',\r\n    references,\r\n});\r\n\r\nexport default setResumeReferences;\r\n","import React, { Fragment, useCallback, memo } from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { makeStyles } from '@material-ui/styles';\r\n\r\n// Components\r\nimport ItemInput from './List/ItemInput';\r\nimport ItemsList from './List/ItemsList';\r\n\r\n// Styles\r\nimport style from '../resumeDrawerStyles';\r\n\r\n// Actions\r\nimport setResumeReferences from '../../../store/actions/setResumeReferences';\r\n\r\n// Utils\r\nimport { varNameToString } from '../../../utils/utils';\r\n\r\n// Hooks\r\nimport { useDispatch } from '../../../store/StoreProvider';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    ...style,\r\n}));\r\n\r\nfunction References({ references }) {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n    const setResumeReferencesState = useCallback((newReferences) => {\r\n        dispatch(setResumeReferences(newReferences));\r\n    }, [dispatch]);\r\n\r\n    const toggleReferences = useCallback(() => {\r\n        const currentState = references?.enabled;\r\n        setResumeReferencesState({\r\n            ...references,\r\n            enabled: !currentState,\r\n        });\r\n    }, [references, setResumeReferencesState]);\r\n\r\n    const toggleReference = useCallback((reference, index) => () => {\r\n        const newReferences = { ...references };\r\n        newReferences.value[index] = {\r\n            ...newReferences.value[index],\r\n            enabled: !newReferences.value[index].enabled,\r\n        };\r\n        setResumeReferencesState(newReferences);\r\n    }, [references, setResumeReferencesState]);\r\n\r\n    const toggleReferencesDetail = useCallback((reference, index, propName) => () => {\r\n        const newReferences = { ...references };\r\n        newReferences.value[index] = {\r\n            ...newReferences.value[index],\r\n            value: {\r\n                ...newReferences.value[index].value,\r\n                [propName]: {\r\n                    ...newReferences.value[index].value[propName],\r\n                    enabled: !newReferences.value[index].value[propName].enabled,\r\n                },\r\n            },\r\n        };\r\n\r\n        if (newReferences.value[index].enabled) {\r\n            newReferences.value[index].enabled =\r\n                Object.entries(newReferences.value[index].value).some((entry) => entry[1].enabled);\r\n        }\r\n        setResumeReferencesState(newReferences);\r\n    }, [references, setResumeReferencesState]);\r\n\r\n    return (\r\n        <div className={classes.resumeDrawerItem}>\r\n            <ItemInput\r\n                label={varNameToString({ references })}\r\n                onChange={toggleReferences}\r\n                checked={references?.enabled}\r\n            />\r\n            {references?.enabled && (\r\n                <ul>\r\n                    {references?.value.map((ref, index) => {\r\n                        const {\r\n                            name,\r\n                            reference,\r\n                        } = ref?.value || {};\r\n\r\n                        return (\r\n                            <Fragment key={uuid()}>\r\n                                {ref && (\r\n                                    <ItemsList\r\n                                        label={name?.value}\r\n                                        checked={ref?.enabled}\r\n                                        onClick={toggleReference(ref, index)}\r\n                                    />\r\n                                )}\r\n                                {ref?.enabled && (\r\n                                    <ul>\r\n                                        {name && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ name })}\r\n                                                checked={name?.enabled}\r\n                                                onClick={toggleReferencesDetail(\r\n                                                    ref,\r\n                                                    index,\r\n                                                    varNameToString({ name })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {reference && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ reference })}\r\n                                                checked={reference?.enabled}\r\n                                                onClick={toggleReferencesDetail(\r\n                                                    ref,\r\n                                                    index,\r\n                                                    varNameToString({ reference })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                    </ul>\r\n                                )}\r\n                            </Fragment>\r\n                        );\r\n                    })}\r\n                </ul>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default memo(References);\r\n","const setResumeSkills = (skills) => ({\r\n    type: 'SET_RESUME_SKILLS',\r\n    skills,\r\n});\r\n\r\nexport default setResumeSkills;\r\n","import React, { Fragment, useCallback, memo } from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { makeStyles } from '@material-ui/styles';\r\n\r\n// Components\r\nimport ItemInput from './List/ItemInput';\r\nimport ItemsList from './List/ItemsList';\r\n\r\n// Actions\r\nimport style from '../resumeDrawerStyles';\r\nimport setResumeSkills from '../../../store/actions/setResumeSkills';\r\nimport { varNameToString } from '../../../utils/utils';\r\nimport { useDispatch } from '../../../store/StoreProvider';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    ...style,\r\n}));\r\n\r\nfunction Skills({ skills }) {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n    const setResumeSkillsState = useCallback((newSkills) => {\r\n        dispatch(setResumeSkills(newSkills));\r\n    }, [dispatch]);\r\n\r\n    const toggleSkills = useCallback(() => {\r\n        const currentState = skills?.enabled;\r\n        setResumeSkillsState({\r\n            ...skills,\r\n            enabled: !currentState,\r\n        });\r\n    }, [setResumeSkillsState, skills]);\r\n\r\n    const toggleSkill = useCallback((skill, index) => () => {\r\n        const newSkills = { ...skills };\r\n        newSkills.value[index] = {\r\n            ...newSkills.value[index],\r\n            enabled: !newSkills.value[index].enabled,\r\n        };\r\n        setResumeSkillsState(newSkills);\r\n    }, [setResumeSkillsState, skills]);\r\n\r\n    const toggleSkillsDetail = useCallback((skill, index, propName) => () => {\r\n        const newSkills = { ...skills };\r\n        newSkills.value[index] = {\r\n            ...newSkills.value[index],\r\n            value: {\r\n                ...newSkills.value[index].value,\r\n                [propName]: {\r\n                    ...newSkills.value[index].value[propName],\r\n                    enabled: !newSkills.value[index].value[propName].enabled,\r\n                },\r\n            },\r\n        };\r\n\r\n        if (newSkills.value[index].enabled) {\r\n            newSkills.value[index].enabled =\r\n                Object.entries(newSkills.value[index].value).some((entry) => entry[1].enabled);\r\n        }\r\n        setResumeSkillsState(newSkills);\r\n    }, [setResumeSkillsState, skills]);\r\n\r\n    const toggleSkillKeywords = useCallback((skill, skillIndex, keyword, keywordIndex) => () => {\r\n        const newSkills = { ...skills };\r\n        newSkills.value[skillIndex].value.keywords.value[keywordIndex] = {\r\n            ...newSkills.value[skillIndex].value.keywords.value[keywordIndex],\r\n            enabled: !newSkills.value[skillIndex].value.keywords.value[keywordIndex].enabled,\r\n        };\r\n        setResumeSkillsState(newSkills);\r\n    }, [setResumeSkillsState, skills]);\r\n\r\n    return (\r\n        <div className={classes.resumeDrawerItem}>\r\n            <ItemInput\r\n                label={varNameToString({ skills })}\r\n                onChange={toggleSkills}\r\n                checked={skills?.enabled}\r\n            />\r\n            {skills?.enabled && (\r\n                <ul>\r\n                    {skills?.value.map((skill, index) => {\r\n                        const {\r\n                            name,\r\n                            level,\r\n                            keywords,\r\n                        } = skill?.value || {};\r\n\r\n                        return (\r\n                            <Fragment key={uuid()}>\r\n                                {skill && (\r\n                                    <ItemsList\r\n                                        label={name?.value}\r\n                                        checked={skill?.enabled}\r\n                                        onClick={toggleSkill(skill, index)}\r\n                                    />\r\n                                )}\r\n                                {skill?.enabled && (\r\n                                    <ul>\r\n                                        {level && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ level })}\r\n                                                checked={level?.enabled}\r\n                                                onClick={toggleSkillsDetail(\r\n                                                    skill,\r\n                                                    index,\r\n                                                    varNameToString({ level })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {name && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ name })}\r\n                                                checked={name?.enabled}\r\n                                                onClick={toggleSkillsDetail(\r\n                                                    skill,\r\n                                                    index,\r\n                                                    varNameToString({ name })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {keywords && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ keywords })}\r\n                                                checked={keywords?.enabled}\r\n                                                onClick={toggleSkillsDetail(\r\n                                                    skill,\r\n                                                    index,\r\n                                                    varNameToString({ keywords })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {keywords?.enabled && (\r\n                                            <ul>\r\n                                                {keywords?.value.map((keyword, idx) => (\r\n                                                    <ItemsList\r\n                                                        label={keyword?.value}\r\n                                                        key={uuid()}\r\n                                                        checked={keyword?.enabled}\r\n                                                        onClick={toggleSkillKeywords(\r\n                                                            skill,\r\n                                                            index,\r\n                                                            keyword,\r\n                                                            idx\r\n                                                        )}\r\n                                                    />\r\n                                                ))}\r\n                                            </ul>\r\n                                        )}\r\n                                    </ul>\r\n                                )}\r\n                            </Fragment>\r\n                        );\r\n                    })}\r\n                </ul>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default memo(Skills);\r\n","const setResumeVolunteer = (volunteer) => ({\r\n    type: 'SET_RESUME_VOLUNTEER',\r\n    volunteer,\r\n});\r\n\r\nexport default setResumeVolunteer;\r\n","import React, { Fragment, useCallback, memo } from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { makeStyles } from '@material-ui/styles';\r\n\r\n// Components\r\nimport ItemInput from './List/ItemInput';\r\nimport ItemsList from './List/ItemsList';\r\n\r\n// Utils\r\nimport { varNameToString } from '../../../utils/utils';\r\n\r\n// Styles\r\nimport style from '../resumeDrawerStyles';\r\n\r\n// Actions\r\nimport setResumeVolunteer from '../../../store/actions/setResumeVolunteer';\r\n\r\n// Hooks\r\nimport { useDispatch } from '../../../store/StoreProvider';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    ...style,\r\n}));\r\n\r\nfunction Volunteer({ volunteer: volunteerData }) {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n    const setResumeVolunteerState = useCallback((volunteer) => {\r\n        dispatch(setResumeVolunteer(volunteer));\r\n    }, [dispatch]);\r\n\r\n    const toggleVolunteers = useCallback(() => {\r\n        const currentState = volunteerData?.enabled;\r\n        setResumeVolunteerState({\r\n            ...volunteerData,\r\n            enabled: !currentState,\r\n        });\r\n    }, [setResumeVolunteerState, volunteerData]);\r\n\r\n    const toggleVolunteer = useCallback((volunteer, index) => () => {\r\n        const newVolunteer = { ...volunteerData };\r\n        newVolunteer.value[index] = {\r\n            ...newVolunteer.value[index],\r\n            enabled: !newVolunteer.value[index].enabled,\r\n        };\r\n        setResumeVolunteerState(newVolunteer);\r\n    }, [setResumeVolunteerState, volunteerData]);\r\n\r\n    const toggleVolunteerDetail = useCallback((volunteer, index, propName) => () => {\r\n        const newVolunteer = { ...volunteerData };\r\n        newVolunteer.value[index] = {\r\n            ...newVolunteer.value[index],\r\n            value: {\r\n                ...newVolunteer.value[index].value,\r\n                [propName]: {\r\n                    ...newVolunteer.value[index].value[propName],\r\n                    enabled: !newVolunteer.value[index].value[propName].enabled,\r\n                },\r\n            },\r\n        };\r\n\r\n        if (newVolunteer.value[index].enabled) {\r\n            newVolunteer.value[index].enabled =\r\n                Object.entries(newVolunteer.value[index].value).some((entry) => entry[1].enabled);\r\n        }\r\n        setResumeVolunteerState(newVolunteer);\r\n    }, [setResumeVolunteerState, volunteerData]);\r\n\r\n    const toggleVolunteerHighlights = useCallback((volunteer, volunteerIndex, highlight, highlightIndex) => () => {\r\n        const newVolunteer = { ...volunteerData };\r\n        newVolunteer.value[volunteerIndex].value.highlights.value[highlightIndex] = {\r\n            ...newVolunteer.value[volunteerIndex].value.highlights.value[highlightIndex],\r\n            enabled: !newVolunteer.value[volunteerIndex].value.highlights.value[highlightIndex].enabled,\r\n        };\r\n        setResumeVolunteerState(newVolunteer);\r\n    }, [setResumeVolunteerState, volunteerData]);\r\n\r\n    const {\r\n        enabled: volunteerEnabled,\r\n        value: volunteers,\r\n    } = volunteerData || {};\r\n\r\n    return (\r\n        <div className={classes.resumeDrawerItem}>\r\n            <ItemInput\r\n                // TODO varNameToString({ volunteer })\r\n                label=\"volunteer\"\r\n                onChange={toggleVolunteers}\r\n                checked={volunteerEnabled}\r\n            />\r\n            {volunteerEnabled && (\r\n                <ul>\r\n                    {volunteers.map((volunteer, index) => {\r\n                        const {\r\n                            organization,\r\n                            position,\r\n                            url,\r\n                            startDate,\r\n                            endDate,\r\n                            summary,\r\n                            highlights,\r\n                        } = volunteer?.value || {};\r\n\r\n                        return (\r\n                            <Fragment key={uuid()}>\r\n                                {volunteer && (\r\n                                    <ItemsList\r\n                                        label={organization?.value}\r\n                                        checked={volunteer?.enabled}\r\n                                        onClick={toggleVolunteer(volunteer, index)}\r\n                                    />\r\n                                )}\r\n                                {volunteer?.enabled && (\r\n                                    <ul>\r\n                                        {organization && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ organization })}\r\n                                                checked={organization?.enabled}\r\n                                                onClick={toggleVolunteerDetail(\r\n                                                    volunteer,\r\n                                                    index,\r\n                                                    varNameToString({ organization })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {position && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ position })}\r\n                                                checked={position?.enabled}\r\n                                                onClick={toggleVolunteerDetail(\r\n                                                    volunteer,\r\n                                                    index,\r\n                                                    varNameToString({ position })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {url && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ url })}\r\n                                                checked={url?.enabled}\r\n                                                onClick={toggleVolunteerDetail(\r\n                                                    volunteer,\r\n                                                    index,\r\n                                                    varNameToString({ url })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {startDate && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ startDate })}\r\n                                                checked={startDate?.enabled}\r\n                                                onClick={toggleVolunteerDetail(\r\n                                                    volunteer,\r\n                                                    index,\r\n                                                    varNameToString({ startDate })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {endDate && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ endDate })}\r\n                                                checked={endDate?.enabled}\r\n                                                onClick={toggleVolunteerDetail(\r\n                                                    volunteer,\r\n                                                    index,\r\n                                                    varNameToString({ endDate })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {summary && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ summary })}\r\n                                                checked={summary?.enabled}\r\n                                                onClick={toggleVolunteerDetail(\r\n                                                    volunteer,\r\n                                                    index,\r\n                                                    varNameToString({ summary })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {highlights && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ highlights })}\r\n                                                checked={highlights?.enabled}\r\n                                                onClick={toggleVolunteerDetail(\r\n                                                    volunteer,\r\n                                                    index,\r\n                                                    varNameToString({ highlights })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {highlights?.enabled && (\r\n                                            <ul>\r\n                                                {highlights?.value.map((highlight, idx) => (\r\n                                                    <ItemsList\r\n                                                        label={highlight?.value}\r\n                                                        key={uuid()}\r\n                                                        checked={highlight?.enabled}\r\n                                                        onClick={toggleVolunteerHighlights(\r\n                                                            volunteer,\r\n                                                            index,\r\n                                                            highlight,\r\n                                                            idx\r\n                                                        )}\r\n                                                    />\r\n                                                ))}\r\n                                            </ul>\r\n                                        )}\r\n                                    </ul>\r\n                                )}\r\n                            </Fragment>\r\n                        );\r\n                    })}\r\n                </ul>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default memo(Volunteer);\r\n","const setResumeWork = (work) => ({\r\n    type: 'SET_RESUME_WORK',\r\n    work,\r\n});\r\n\r\nexport default setResumeWork;\r\n","import React, { Fragment, useCallback, memo } from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { makeStyles } from '@material-ui/styles';\r\n\r\n// Components\r\nimport ItemInput from './List/ItemInput';\r\nimport ItemsList from './List/ItemsList';\r\n\r\n// Utils\r\nimport { varNameToString } from '../../../utils/utils';\r\n\r\n// Styles\r\nimport style from '../resumeDrawerStyles';\r\n\r\n// Actions\r\nimport setResumeWork from '../../../store/actions/setResumeWork';\r\n\r\n// Hooks\r\nimport { useDispatch } from '../../../store/StoreProvider';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    ...style,\r\n}));\r\n\r\nfunction Work({ work: workData }) {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n    const {\r\n        enabled: workEnabled,\r\n        value: works,\r\n    } = workData || {};\r\n\r\n    const setResumeWorkState = useCallback((newWork) => {\r\n        dispatch(setResumeWork(newWork));\r\n    }, [dispatch]);\r\n\r\n    const toggleWorks = useCallback(() => {\r\n        const currentState = workData?.enabled;\r\n        setResumeWorkState({\r\n            ...workData,\r\n            enabled: !currentState,\r\n        });\r\n    }, [setResumeWorkState, workData]);\r\n\r\n    const toggleWork = useCallback((oldWork, index) => () => {\r\n        const newWork = { ...workData };\r\n        newWork.value[index] = {\r\n            ...newWork.value[index],\r\n            enabled: !newWork.value[index].enabled,\r\n        };\r\n        setResumeWorkState(newWork);\r\n    }, [setResumeWorkState, workData]);\r\n\r\n    const toggleWorkDetail = useCallback((oldWork, index, propName) => () => {\r\n        const newWork = { ...workData };\r\n        newWork.value[index] = {\r\n            ...newWork.value[index],\r\n            value: {\r\n                ...newWork.value[index].value,\r\n                [propName]: {\r\n                    ...newWork.value[index].value[propName],\r\n                    enabled: !newWork.value[index].value[propName].enabled,\r\n                },\r\n            },\r\n        };\r\n\r\n        if (newWork.value[index].enabled) {\r\n            newWork.value[index].enabled =\r\n                Object.entries(newWork.value[index].value).some((entry) => entry[1].enabled);\r\n        }\r\n        setResumeWorkState(newWork);\r\n    }, [setResumeWorkState, workData]);\r\n\r\n    const toggleWorkHighlights = useCallback((oldWork, oldWorkIndex, highlight, highlightIndex) => () => {\r\n        const newWork = { ...workData };\r\n        newWork.value[oldWorkIndex].value.highlights.value[highlightIndex] = {\r\n            ...newWork.value[oldWorkIndex].value.highlights.value[highlightIndex],\r\n            enabled: !newWork.value[oldWorkIndex].value.highlights.value[highlightIndex].enabled,\r\n        };\r\n        setResumeWorkState(newWork);\r\n    }, [setResumeWorkState, workData]);\r\n\r\n    const toggleWorkKeywords = useCallback((oldWork, oldWorkIndex, keyword, keywordIndex) => () => {\r\n        const newWork = { ...workData };\r\n        newWork.value[oldWorkIndex].value.keywords.value[keywordIndex] = {\r\n            ...newWork.value[oldWorkIndex].value.keywords.value[keywordIndex],\r\n            enabled: !newWork.value[oldWorkIndex].value.keywords.value[keywordIndex].enabled,\r\n        };\r\n        setResumeWorkState(newWork);\r\n    }, [setResumeWorkState, workData]);\r\n\r\n    return (\r\n        <div className={classes.resumeDrawerItem}>\r\n            <ItemInput\r\n                // TODO varNameToString({ work })\r\n                label=\"work\"\r\n                onChange={toggleWorks}\r\n                checked={workEnabled}\r\n            />\r\n            {workEnabled && (\r\n                <ul>\r\n                    {works.map((work, index) => {\r\n                        const {\r\n                            name,\r\n                            location,\r\n                            description,\r\n                            position,\r\n                            url,\r\n                            startDate,\r\n                            endDate,\r\n                            summary,\r\n                            highlights,\r\n                            keywords,\r\n                        } = work?.value || {};\r\n\r\n                        return (\r\n                            <Fragment key={uuid()}>\r\n                                {work && (\r\n                                    <ItemsList\r\n                                        label={name?.value}\r\n                                        checked={work?.enabled}\r\n                                        onClick={toggleWork(work, index)}\r\n                                    />\r\n                                )}\r\n                                {work?.enabled && (\r\n                                    <ul>\r\n                                        {name && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ name })}\r\n                                                checked={name?.enabled}\r\n                                                onClick={toggleWorkDetail(\r\n                                                    work,\r\n                                                    index,\r\n                                                    varNameToString({ name })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {position && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ position })}\r\n                                                checked={position?.enabled}\r\n                                                onClick={toggleWorkDetail(\r\n                                                    work,\r\n                                                    index,\r\n                                                    varNameToString({ position })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {url && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ url })}\r\n                                                checked={url?.enabled}\r\n                                                onClick={toggleWorkDetail(\r\n                                                    work,\r\n                                                    index,\r\n                                                    varNameToString({ url })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {location && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ location })}\r\n                                                checked={location?.enabled}\r\n                                                onClick={toggleWorkDetail(\r\n                                                    work,\r\n                                                    index,\r\n                                                    varNameToString({ location })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {startDate && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ startDate })}\r\n                                                checked={startDate?.enabled}\r\n                                                onClick={toggleWorkDetail(\r\n                                                    work,\r\n                                                    index,\r\n                                                    varNameToString({ startDate })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {endDate && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ endDate })}\r\n                                                checked={endDate?.enabled}\r\n                                                onClick={toggleWorkDetail(\r\n                                                    work,\r\n                                                    index,\r\n                                                    varNameToString({ endDate })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {summary && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ summary })}\r\n                                                checked={summary?.enabled}\r\n                                                onClick={toggleWorkDetail(\r\n                                                    work,\r\n                                                    index,\r\n                                                    varNameToString({ summary })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {description && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ description })}\r\n                                                checked={description?.enabled}\r\n                                                onClick={toggleWorkDetail(\r\n                                                    work,\r\n                                                    index,\r\n                                                    varNameToString({ description })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {highlights && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ highlights })}\r\n                                                checked={highlights?.enabled}\r\n                                                onClick={toggleWorkDetail(\r\n                                                    work,\r\n                                                    index,\r\n                                                    varNameToString({ highlights })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {highlights?.enabled && (\r\n                                            <ul>\r\n                                                {highlights?.value.map((highlight, idx) => (\r\n                                                    <ItemsList\r\n                                                        label={highlight?.value}\r\n                                                        key={uuid()}\r\n                                                        checked={highlight?.enabled}\r\n                                                        onClick={toggleWorkHighlights(\r\n                                                            work,\r\n                                                            index,\r\n                                                            highlight,\r\n                                                            idx\r\n                                                        )}\r\n                                                    />\r\n                                                ))}\r\n                                            </ul>\r\n                                        )}\r\n                                        {keywords && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ keywords })}\r\n                                                checked={keywords?.enabled}\r\n                                                onClick={toggleWorkDetail(\r\n                                                    work,\r\n                                                    index,\r\n                                                    varNameToString({ keywords })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {keywords?.enabled && (\r\n                                            <ul>\r\n                                                {keywords?.value.map((keyword, idx) => (\r\n                                                    <ItemsList\r\n                                                        label={keyword?.value}\r\n                                                        key={uuid()}\r\n                                                        checked={keyword?.enabled}\r\n                                                        onClick={toggleWorkKeywords(\r\n                                                            work,\r\n                                                            index,\r\n                                                            keyword,\r\n                                                            idx\r\n                                                        )}\r\n                                                    />\r\n                                                ))}\r\n                                            </ul>\r\n                                        )}\r\n                                    </ul>\r\n                                )}\r\n                            </Fragment>\r\n                        );\r\n                    })}\r\n                </ul>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default memo(Work);\r\n","import React from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { makeStyles } from '@material-ui/styles';\r\n\r\n// Utils\r\nimport { capitalize } from '../../../../utils/utils';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    inputWrapper: {\r\n        justifyContent: 'space-between',\r\n        display: 'flex',\r\n    },\r\n    inputLabel: {\r\n        marginRight: '10px',\r\n    },\r\n    textInput: {\r\n        // width: '-webkit-fill-available',\r\n        // width: '-moz-available',\r\n        width: 'fill-available',\r\n        maxWidth: '75%',\r\n        minWidth: '35%',\r\n    },\r\n}));\r\n\r\nconst VariableInput = ({\r\n    onChange,\r\n    value = '',\r\n    label = '',\r\n}) => {\r\n    const id = uuid();\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.inputWrapper}>\r\n            <label\r\n                className={classes.inputLabel}\r\n                htmlFor={id}\r\n            >\r\n                {capitalize(label)}\r\n            </label>\r\n            <input\r\n                className={classes.textInput}\r\n                type=\"text\"\r\n                onChange={onChange}\r\n                id={id}\r\n                placeholder={label}\r\n                value={value}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VariableInput;\r\n","const setResumeCoverLetter = (coverLetter) => ({\r\n    type: 'SET_RESUME_COVER_LETTER',\r\n    coverLetter,\r\n});\r\n\r\nexport default setResumeCoverLetter;\r\n","import React, { useCallback, memo } from 'react';\r\nimport { makeStyles } from '@material-ui/styles';\r\n\r\n// Components\r\nimport ItemInput from './List/ItemInput';\r\nimport VariableInput from './List/VariableInput';\r\n\r\n// Styles\r\nimport style from '../resumeDrawerStyles';\r\n\r\n// Actions\r\nimport setResumeCoverLetter from '../../../store/actions/setResumeCoverLetter';\r\n\r\n// Hooks\r\nimport { useDispatch } from '../../../store/StoreProvider';\r\n\r\n// Utils\r\nimport { varNameToString } from '../../../utils/utils';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    ...style,\r\n}));\r\n\r\nfunction CoverLetter({ coverLetter }) {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const toggleCoverLetter = useCallback(() => {\r\n        const currentState = coverLetter?.enabled;\r\n        dispatch(setResumeCoverLetter({\r\n            ...coverLetter,\r\n            enabled: !currentState,\r\n        }));\r\n    }, [coverLetter, dispatch]);\r\n\r\n    const handleOnInputChanged = useCallback((name) => (event) =>\r\n        dispatch(setResumeCoverLetter({\r\n            ...coverLetter,\r\n            value: {\r\n                ...coverLetter.value,\r\n                variables: {\r\n                    ...coverLetter.value.variables,\r\n                    [name]: event.target.value,\r\n                },\r\n            },\r\n        })), [coverLetter, dispatch]);\r\n\r\n    return (\r\n        <div className={classes.resumeDrawerItem}>\r\n            <ItemInput\r\n                label={varNameToString({ coverLetter })}\r\n                onChange={toggleCoverLetter}\r\n                checked={coverLetter?.enabled}\r\n            />\r\n            {Object.entries(coverLetter.value.variables).map((entry) => {\r\n                const [name, value] = entry;\r\n                return (\r\n                    <VariableInput\r\n                        key={name}\r\n                        label={name}\r\n                        value={value}\r\n                        onChange={handleOnInputChanged(name)}\r\n                    />\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default memo(CoverLetter);\r\n","const setResumeCertificates = (certificates) => ({\r\n    type: 'SET_RESUME_CERTIFICATES',\r\n    certificates,\r\n});\r\n\r\nexport default setResumeCertificates;\r\n","import React, { Fragment, useCallback, memo } from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { makeStyles } from '@material-ui/styles';\r\n\r\n// Components\r\nimport ItemInput from './List/ItemInput';\r\nimport ItemsList from './List/ItemsList';\r\n\r\n// Styles\r\nimport style from '../resumeDrawerStyles';\r\n\r\n// Actions\r\nimport setResumeCertificates from '../../../store/actions/setResumeCertificates';\r\n\r\n// Utils\r\nimport { varNameToString } from '../../../utils/utils';\r\n\r\n// Hooks\r\nimport { useDispatch } from '../../../store/StoreProvider';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    ...style,\r\n}));\r\n\r\nfunction Certificates({ certificates }) {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n    const setResumeCertificatesState = useCallback((newCertificates) => {\r\n        dispatch(setResumeCertificates(newCertificates));\r\n    }, [dispatch]);\r\n\r\n    const toggleCertificates = useCallback(() => {\r\n        const currentState = certificates?.enabled;\r\n        setResumeCertificatesState({\r\n            ...certificates,\r\n            enabled: !currentState,\r\n        });\r\n    }, [certificates, setResumeCertificatesState]);\r\n\r\n    const toggleCertificate = useCallback((certificate, index) => () => {\r\n        const newCertificates = { ...certificates };\r\n        newCertificates.value[index] = {\r\n            ...newCertificates.value[index],\r\n            enabled: !newCertificates.value[index].enabled,\r\n        };\r\n        setResumeCertificatesState(newCertificates);\r\n    }, [certificates, setResumeCertificatesState]);\r\n\r\n    const toggleCertificatesDetail = useCallback((certificate, index, propName) => () => {\r\n        const newCertificates = { ...certificates };\r\n        newCertificates.value[index] = {\r\n            ...newCertificates.value[index],\r\n            value: {\r\n                ...newCertificates.value[index].value,\r\n                [propName]: {\r\n                    ...newCertificates.value[index].value[propName],\r\n                    enabled: !newCertificates.value[index].value[propName].enabled,\r\n                },\r\n            },\r\n        };\r\n\r\n        if (newCertificates.value[index].enabled) {\r\n            newCertificates.value[index].enabled =\r\n                Object.entries(newCertificates.value[index].value).some((entry) => entry[1].enabled);\r\n        }\r\n        setResumeCertificatesState(newCertificates);\r\n    }, [certificates, setResumeCertificatesState]);\r\n\r\n    return (\r\n        <div className={classes.resumeDrawerItem}>\r\n            <ItemInput\r\n                label={varNameToString({ certificates })}\r\n                onChange={toggleCertificates}\r\n                checked={certificates?.enabled}\r\n            />\r\n            {certificates?.enabled && (\r\n                <ul>\r\n                    {certificates?.value.map((certificate, index) => {\r\n                        const {\r\n                            name,\r\n                            date,\r\n                            url,\r\n                            issuer,\r\n                        } = certificate?.value || {};\r\n\r\n                        return (\r\n                            <Fragment key={uuid()}>\r\n                                <ItemsList\r\n                                    label={name?.value}\r\n                                    checked={certificate?.enabled}\r\n                                    onClick={toggleCertificate(certificate, index)}\r\n                                />\r\n                                {certificate?.enabled && (\r\n                                    <ul>\r\n                                        {name && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ name })}\r\n                                                checked={name?.enabled}\r\n                                                onClick={toggleCertificatesDetail(\r\n                                                    certificate,\r\n                                                    index,\r\n                                                    varNameToString({ name })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {date && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ date })}\r\n                                                checked={date?.enabled}\r\n                                                onClick={toggleCertificatesDetail(\r\n                                                    certificate,\r\n                                                    index,\r\n                                                    varNameToString({ date })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {issuer && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ issuer })}\r\n                                                checked={issuer?.enabled}\r\n                                                onClick={toggleCertificatesDetail(\r\n                                                    certificate,\r\n                                                    index,\r\n                                                    varNameToString({ issuer })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                        {url && (\r\n                                            <ItemsList\r\n                                                label={varNameToString({ url })}\r\n                                                checked={url?.enabled}\r\n                                                onClick={toggleCertificatesDetail(\r\n                                                    certificate,\r\n                                                    index,\r\n                                                    varNameToString({ url })\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                    </ul>\r\n                                )}\r\n                            </Fragment>\r\n                        );\r\n                    })}\r\n                </ul>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default memo(Certificates);\r\n","const setEnableSourceDataDownload = (enableSourceDataDownload) => ({\r\n    type: 'SET_ENABLE_SOURCE_DATA_DOWNLOAD',\r\n    enableSourceDataDownload,\r\n});\r\n\r\nexport default setEnableSourceDataDownload;\r\n","import React, { useCallback, memo } from 'react';\r\nimport { makeStyles } from '@material-ui/styles';\r\n\r\n// Components\r\nimport ItemInput from './List/ItemInput';\r\n\r\n// Styles\r\nimport style from '../resumeDrawerStyles';\r\n\r\n// Actions\r\nimport setEnableSourceDataDownload from '../../../store/actions/setEnableSourceDataDownload';\r\n\r\n// Hooks\r\nimport { useDispatch } from '../../../store/StoreProvider';\r\n\r\n// Utils\r\nimport { varNameToString } from '../../../utils/utils';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    ...style,\r\n}));\r\n\r\nfunction Download({ enableSourceDataDownload }) {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const toggleCoverLetter = useCallback(() => {\r\n        dispatch(setEnableSourceDataDownload(!enableSourceDataDownload));\r\n    }, [enableSourceDataDownload, dispatch]);\r\n\r\n    return (\r\n        <div className={classes.resumeDrawerItem}>\r\n            <ItemInput\r\n                label={varNameToString({ enableSourceDataDownload })}\r\n                onChange={toggleCoverLetter}\r\n                checked={enableSourceDataDownload}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default memo(Download);\r\n","import React, { useCallback } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { Typography } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useIntl } from 'gatsby-plugin-intl';\r\nimport { cloneDeep } from 'lodash';\r\n\r\n// Styles\r\nimport style from './resumeDrawerStyles';\r\n\r\n// Components\r\nimport Awards from './Items/Awards';\r\nimport Basics from './Items/Basics';\r\nimport Education from './Items/Education';\r\nimport Interests from './Items/Interests';\r\nimport Languages from './Items/Languages';\r\nimport Publications from './Items/Publications';\r\nimport Projects from './Items/Projects';\r\nimport References from './Items/References';\r\nimport Skills from './Items/Skills';\r\nimport Volunteer from './Items/Volunteer';\r\nimport Work from './Items/Work';\r\nimport CoverLetter from './Items/CoverLetter';\r\nimport Certificates from './Items/Certificates';\r\nimport Download from './Items/Download';\r\nimport TemplateSelector from '../TemplateSelector';\r\n\r\n// Utils\r\nimport { convertToRegularObject, isObjectNotEmpty } from '../../utils/utils';\r\nimport { downloadJson } from '../../utils/json-parser';\r\n\r\n// Base resume\r\nimport baseResume from '../../store/resume.json';\r\n\r\n// Actions\r\nimport setResumeTemplate from '../../store/actions/setResumeTemplate';\r\n\r\n// Hooks\r\nimport { useDispatch } from '../../store/StoreProvider';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    ...style,\r\n    actionButtons: {\r\n        display: 'block',\r\n        margin: '10px 10px 10px 0',\r\n    },\r\n    templateSelectorWrapper: {\r\n        borderTop: '1px solid #ddd',\r\n    },\r\n    templateSelector: {\r\n        width: '100%',\r\n        margin: '10px auto',\r\n    },\r\n    templateSelectorTitle: {\r\n        marginTop: '10px',\r\n    },\r\n}));\r\n\r\nconst ResumeDrawerItems = ({\r\n    toggleableJsonResume,\r\n    toggleableJsonResume: {\r\n        basics,\r\n        work,\r\n        skills,\r\n        education,\r\n        awards,\r\n        volunteer,\r\n        publications,\r\n        languages,\r\n        interests,\r\n        references,\r\n        projects,\r\n        certificates,\r\n        // custom attributes\r\n        coverLetter,\r\n        enableSourceDataDownload = false,\r\n    },\r\n    onClose,\r\n    onPrint,\r\n}) => {\r\n    const classes = useStyles();\r\n    const intl = useIntl();\r\n    const dispatch = useDispatch();\r\n\r\n    const printDocument = useCallback(() => {\r\n        window.print();\r\n    }, []);\r\n\r\n    const handleDownloadJson = useCallback(() => {\r\n        const jsonResume = {\r\n            ...baseResume,\r\n            ...convertToRegularObject(\r\n                cloneDeep(toggleableJsonResume)\r\n            ),\r\n            enableSourceDataDownload: toggleableJsonResume.enableSourceDataDownload,\r\n            coverLetter: toggleableJsonResume.coverLetter?.value?.text || '',\r\n            // eslint-disable-next-line no-underscore-dangle\r\n            __translation__: cloneDeep(toggleableJsonResume.__translation__),\r\n        };\r\n\r\n        downloadJson(jsonResume);\r\n    }, [toggleableJsonResume]);\r\n\r\n    const handleTemplateSelected = useCallback((selectedTemplate) => {\r\n        dispatch(setResumeTemplate(selectedTemplate));\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <div className={classes.resumeDrawerItemsWrapper}>\r\n            <button\r\n                type=\"button\"\r\n                onClick={onClose}\r\n            >\r\n                <CloseIcon />\r\n            </button>\r\n            <div>\r\n                <Button\r\n                    className={classes.actionButtons}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    disabled\r\n                >\r\n                    {intl.formatMessage({ id: 'download_doc' })}\r\n                </Button>\r\n                <Button\r\n                    className={classes.actionButtons}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={handleDownloadJson}\r\n                >\r\n                    {intl.formatMessage({ id: 'download_json' })}\r\n                </Button>\r\n                <Button\r\n                    className={classes.actionButtons}\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    onClick={onPrint || printDocument}\r\n                >\r\n                    {intl.formatMessage({ id: 'print' })}\r\n                </Button>\r\n            </div>\r\n            <div className={classes.templateSelectorWrapper}>\r\n                <Typography\r\n                    color=\"textPrimary\"\r\n                    variant=\"subtitle2\"\r\n                    className={classes.templateSelectorTitle}\r\n                >\r\n                    {intl.formatMessage({ id: 'template' })}\r\n                </Typography>\r\n                <TemplateSelector\r\n                    className={classes.templateSelector}\r\n                    onSelect={handleTemplateSelected}\r\n                />\r\n            </div>\r\n            {isObjectNotEmpty(coverLetter) && (\r\n                <CoverLetter\r\n                    coverLetter={coverLetter}\r\n                />\r\n            )}\r\n            <Download\r\n                enableSourceDataDownload={enableSourceDataDownload}\r\n            />\r\n            {isObjectNotEmpty(basics) && (\r\n                <Basics\r\n                    basics={basics}\r\n                />\r\n            )}\r\n            {isObjectNotEmpty(work) && (\r\n                <Work\r\n                    work={work}\r\n                />\r\n            )}\r\n            {isObjectNotEmpty(skills) && (\r\n                <Skills\r\n                    skills={skills}\r\n                />\r\n            )}\r\n            {isObjectNotEmpty(education) && (\r\n                <Education\r\n                    education={education}\r\n                />\r\n            )}\r\n            {isObjectNotEmpty(awards) && (\r\n                <Awards\r\n                    awards={awards}\r\n                />\r\n            )}\r\n            {isObjectNotEmpty(volunteer) && (\r\n                <Volunteer\r\n                    volunteer={volunteer}\r\n                />\r\n            )}\r\n            {isObjectNotEmpty(publications) && (\r\n                <Publications\r\n                    publications={publications}\r\n                />\r\n            )}\r\n            {isObjectNotEmpty(certificates) && (\r\n                <Certificates\r\n                    certificates={certificates}\r\n                />\r\n            )}\r\n            {isObjectNotEmpty(projects) && (\r\n                <Projects\r\n                    projects={projects}\r\n                />\r\n            )}\r\n            {isObjectNotEmpty(languages) && (\r\n                <Languages\r\n                    languages={languages}\r\n                />\r\n            )}\r\n            {isObjectNotEmpty(interests) && (\r\n                <Interests\r\n                    interests={interests}\r\n                />\r\n            )}\r\n            {isObjectNotEmpty(references) && (\r\n                <References\r\n                    references={references}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ResumeDrawerItems;\r\n","import React from 'react';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    floatingButton: {\r\n        margin: '10px 10px 0 0 !important',\r\n        position: 'fixed !important',\r\n        right: 0,\r\n    },\r\n}));\r\nconst FloatingButton = ({ onClick }) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Fab\r\n            color=\"primary\"\r\n            aria-label=\"add\"\r\n            onClick={onClick}\r\n            className={classes.floatingButton}\r\n        >\r\n            <MenuIcon />\r\n        </Fab>\r\n    );\r\n};\r\n\r\nexport default FloatingButton;\r\n","/* eslint template-curly-spacing: 0, indent: 0 */\r\nimport React, { Suspense, lazy, useEffect, useState, useRef, useCallback } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Drawer } from '@material-ui/core';\r\nimport { navigate, useIntl } from 'gatsby-plugin-intl';\r\nimport { v4 as uuid } from 'uuid';\r\nimport useDetectPrint from 'use-detect-print';\r\nimport { cloneDeep } from 'lodash';\r\n\r\n// Base resume\r\nimport baseResume from '../store/resume.json';\r\n\r\n// Components\r\nimport SEO from '../components/SEO';\r\nimport Layout from '../components/Layout';\r\nimport A4Container from '../components/A4Container';\r\nimport ResumeDrawerItems from '../components/ResumeDrawerItems/ResumeDrawerItems';\r\nimport FloatingButton from '../components/FloatingButton';\r\n\r\n// Hooks\r\nimport { useSelector } from '../store/StoreProvider';\r\n\r\n// Utils\r\nimport { convertToRegularObject, isObjectNotEmpty } from '../utils/utils';\r\n\r\n// Selectors\r\nimport { selectResumeTemplate, selectToggleableJsonResume } from '../store/selectors';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    resumeWrapper: {\r\n        margin: '10px 0',\r\n    },\r\n    drawerWrapper: {\r\n        '& .MuiPaper-root': {\r\n            zIndex: 1000,\r\n        },\r\n    },\r\n}));\r\n\r\nconst importTemplate = (template) => lazy(() =>\r\n    import(`../components/ResumeTemplates/${template}/Index`).catch(() =>\r\n        import('../components/ResumeTemplates/Default/Index')));\r\n\r\nconst ResumePage = () => {\r\n    const intl = useIntl();\r\n    const classes = useStyles();\r\n    const [a4ContainerHeight, setA4ContainerHeight] = useState(null);\r\n    const [isDrawerOpen, setIsDrawerOpen] = useState(false);\r\n    const [resumeTemplate, setResumeTemplate] = useState([]);\r\n    const refContainer = useRef(null);\r\n    const rerenderRef = useRef(false);\r\n    const toggleableJsonResume = useSelector(selectToggleableJsonResume);\r\n    const resumeTemplateName = useSelector(selectResumeTemplate);\r\n    const hasData = isObjectNotEmpty(toggleableJsonResume);\r\n    const isPrinting = useDetectPrint();\r\n\r\n    useEffect(() => {\r\n        if (!hasData) {\r\n            navigate('/');\r\n        }\r\n    }, [hasData]);\r\n\r\n    useEffect(() => {\r\n        async function loadTemplate() {\r\n            const Template = await importTemplate(resumeTemplateName);\r\n            const jsonResume = {\r\n                ...baseResume,\r\n                ...convertToRegularObject(\r\n                    cloneDeep(toggleableJsonResume)\r\n                ),\r\n                enableSourceDataDownload: toggleableJsonResume.enableSourceDataDownload,\r\n                coverLetter:\r\n                    toggleableJsonResume.coverLetter?.enabled && (toggleableJsonResume.coverLetter?.value?.text || ''),\r\n                // eslint-disable-next-line no-underscore-dangle\r\n                __translation__: cloneDeep(toggleableJsonResume.__translation__),\r\n            };\r\n\r\n            setResumeTemplate([\r\n                <Template\r\n                    key={uuid()}\r\n                    // eslint-disable-next-line no-underscore-dangle\r\n                    customTranslations={toggleableJsonResume.__translation__}\r\n                    isPrinting={isPrinting}\r\n                    jsonResume={jsonResume}\r\n                    coverLetterVariables={toggleableJsonResume.coverLetter?.value?.variables || []}\r\n                />,\r\n            ]);\r\n        }\r\n\r\n        loadTemplate();\r\n    }, [\r\n        isPrinting,\r\n        // eslint-disable-next-line no-underscore-dangle\r\n        toggleableJsonResume.__translation__,\r\n        resumeTemplateName,\r\n        toggleableJsonResume,\r\n    ]);\r\n\r\n    const printDocument = useCallback(() => {\r\n        const size = 1122; // roughly A4\r\n        const resumeHeight = refContainer?.current?.clientHeight;\r\n        const ratio = resumeHeight / size;\r\n        if (resumeHeight && ratio > 1) {\r\n            const vhs = Math.ceil(\r\n                parseFloat(ratio.toFixed(2))\r\n            );\r\n            setA4ContainerHeight(vhs * 100);\r\n        } else {\r\n            window.print();\r\n        }\r\n    }, [refContainer]);\r\n\r\n    useEffect(() => {\r\n        // hack to make the printable page background correct\r\n        if (rerenderRef.current) {\r\n            if (a4ContainerHeight) {\r\n                window.print();\r\n                window.setTimeout(() => {\r\n                    setA4ContainerHeight(null);\r\n                }, 10);\r\n            }\r\n        } else {\r\n            rerenderRef.current = true;\r\n        }\r\n    }, [a4ContainerHeight]);\r\n\r\n    return (\r\n        <Layout>\r\n            <SEO\r\n                title={intl.formatMessage({ id: 'build_resume' })}\r\n                robots=\"noindex, nofollow\"\r\n            />\r\n            {hasData && (\r\n                <div className={classes.resumeWrapper}>\r\n                    <FloatingButton\r\n                        onClick={() => setIsDrawerOpen(true)}\r\n                    />\r\n                    <Drawer\r\n                        className={classes.drawerWrapper}\r\n                        anchor=\"right\"\r\n                        variant=\"persistent\"\r\n                        open={isDrawerOpen}\r\n                        onClose={() => setIsDrawerOpen(false)}\r\n                    >\r\n                        <ResumeDrawerItems\r\n                            toggleableJsonResume={toggleableJsonResume}\r\n                            onClose={() => setIsDrawerOpen(false)}\r\n                            onPrint={printDocument}\r\n                        />\r\n                    </Drawer>\r\n                    <div\r\n                        ref={refContainer}\r\n                    >\r\n                        <A4Container\r\n                            alignCenter={!isDrawerOpen}\r\n                            customHeight={a4ContainerHeight}\r\n                        >\r\n                            <Suspense\r\n                                fallback={intl.formatMessage({ id: 'loading' })}\r\n                            >\r\n                                {resumeTemplate}\r\n                            </Suspense>\r\n                        </A4Container>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default ResumePage;\r\n","const setResumeTemplate = (resumeTemplate) => ({\r\n    type: 'SET_RESUME_TEMPLATE',\r\n    resumeTemplate,\r\n});\r\n\r\nexport default setResumeTemplate;\r\n","export const selectResumeTemplate = (state) => state.resumeTemplate;\r\n\r\nexport const selectToggleableJsonResume = (state) => state.toggleableJsonResume;\r\n","export const readJsonFile = (file, callback) => {\r\n    const reader = new FileReader();\r\n    reader.onload = (e) => callback(e.target.result);\r\n    // eslint-disable-next-line\r\n    reader.onerror = () => callback('{}');\r\n    reader.readAsText(file);\r\n};\r\n\r\nexport const downloadJson = (jsonResume) => {\r\n    const jsonString = JSON.stringify(jsonResume);\r\n    const timestamp = new Date().getTime();\r\n    const anchor = document.createElement('a');\r\n    const file = new Blob([jsonString], { type: 'application/json' });\r\n\r\n    anchor.href = URL.createObjectURL(file);\r\n    anchor.download = `jsonResume-${timestamp}.json`;\r\n    anchor.click();\r\n};\r\n","var map = {\n\t\"./Compact/Index\": [\n\t\t9747,\n\t\t774,\n\t\t733,\n\t\t747\n\t],\n\t\"./Default/Index\": [\n\t\t7129,\n\t\t774,\n\t\t733,\n\t\t24,\n\t\t850\n\t],\n\t\"./VanHack/Index\": [\n\t\t1298,\n\t\t774,\n\t\t733,\n\t\t298\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function() { return Object.keys(map); };\nwebpackAsyncContext.id = 5147;\nmodule.exports = webpackAsyncContext;"],"sourceRoot":""}